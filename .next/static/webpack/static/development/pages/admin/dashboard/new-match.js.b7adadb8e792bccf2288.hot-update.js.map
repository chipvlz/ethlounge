{"version":3,"file":"static/webpack/static\\development\\pages\\admin\\dashboard\\new-match.js.b7adadb8e792bccf2288.hot-update.js","sources":["webpack:///./components/dashboard/new-match/APImatches.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Table, Image, Icon, Dimmer, Loader } from 'semantic-ui-react';\r\nimport DateFormatter from '../../../utils/DateFormatter';\r\nimport AddTeam from '../../../utils/api/AddTeam';\r\n\r\nclass APImatches extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { matches: '' };\r\n    this.handleAdd = this.handleAdd.bind(this);\r\n  }\r\n\r\n  // async addTeamToDatabase(team) {\r\n  //   const { id, name, img } = team;\r\n  //   await axios({\r\n  //     method: 'post'\r\n  //   });\r\n  // }\r\n\r\n  async handleAdd(match) {\r\n    const { pandaID, startTime, teams, league } = match;\r\n\r\n    // Teams\r\n\r\n    let teamsFromDb = await teams.map(async curr => {\r\n      const api_response = await axios.get(`/api/teams?apiID=${curr.pandaID}`);\r\n      return api_response.data.team;\r\n    });\r\n\r\n    teamsFromDb = await Promise.all(teamsFromDb);\r\n\r\n    const teamsLogoNeeded = [];\r\n    for (let i = 0; i < 2; i++) {\r\n      if (teamsFromDb[i] === null && teams[i].logo === null);\r\n      teamsLogoNeeded.push(teams[i]);\r\n\r\n      if (teamsFromDb[i] === null && teams[i].logo !== null) {\r\n        AddTeam(teams[i]);\r\n      }\r\n    }\r\n\r\n    const api_response = await axios.get(\r\n      `/api/leagues?apiID=${league.pandaID}`\r\n    );\r\n\r\n    // League\r\n\r\n    const leagueFromDb = api_response.data.league;\r\n\r\n    let leagueLogoNeeded = null;\r\n\r\n    if (leagueFromDb === null && league.logo === null);\r\n    leagueLogoNeeded = league;\r\n\r\n    if (leagueFromDb === null && league.logo !== null);\r\n    // ADD LEAGUE TO DATABASE\r\n\r\n    if (leagueLogoNeeded === null && teamsLogoNeeded.length === 0);\r\n    // WE DONT NEED ANYTHING, TEAMS AND LEAGUE EXIST. WE CAN CREATE A MATCH NOW\r\n  }\r\n\r\n  async getImageFromURL(url) {\r\n    console.log('trying to get image from', url);\r\n    const response = await axios.get(url);\r\n    console.log(response);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const api_call = await axios.get('/api/pandascore/upcoming_matches');\r\n\r\n    // Array of matches.\r\n    const data = api_call.data.data;\r\n\r\n    // Filter to debug\r\n    const debugedData = data.filter(match => {\r\n      if (!match.id) return false;\r\n      if (!match.begin_at) return false;\r\n      if (match.opponents.length !== 2) return false;\r\n      if (!match.league) return false;\r\n\r\n      return true;\r\n    });\r\n\r\n    // Object refactoring\r\n    const matches = debugedData.map(match => {\r\n      if (!match.opponents[0]) console.log(match);\r\n      return {\r\n        pandaID: match.id,\r\n        startTime: new Date(match.begin_at),\r\n        teams: [\r\n          {\r\n            pandaID: match.opponents[0].opponent.id,\r\n            displayName: match.opponents[0].opponent.name,\r\n            logo: match.opponents[0].opponent.image_url\r\n          },\r\n          {\r\n            pandaID: match.opponents[1].opponent.id,\r\n            displayName: match.opponents[1].opponent.name,\r\n            logo: match.opponents[0].opponent.image_url\r\n          }\r\n        ],\r\n        league: {\r\n          pandaID: match.league.id,\r\n          displayName: match.league.name,\r\n          logo: match.league.image_url\r\n        }\r\n      };\r\n    });\r\n\r\n    const markup = matches.map(match => {\r\n      const date = DateFormatter(match.startTime);\r\n      return (\r\n        <Table.Row key={match.pandaID}>\r\n          <Table.Cell>{match.teams[0].displayName}</Table.Cell>\r\n          <Table.Cell>{match.teams[1].displayName}</Table.Cell>\r\n          <Table.Cell>{match.league.displayName}</Table.Cell>\r\n          <Table.Cell>\r\n            <Image size=\"mini\" verticalAlign=\"middle\" src={match.league.logo} />\r\n          </Table.Cell>\r\n          <Table.Cell>{date.formatedDate}</Table.Cell>\r\n          <Table.Cell>{date.aprox}</Table.Cell>\r\n          <Table.Cell>\r\n            <Icon\r\n              onClick={e => this.handleAdd(match)}\r\n              name=\"plus\"\r\n              circular\r\n              className=\"table-icon\"\r\n            />\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      );\r\n    });\r\n\r\n    this.setState({ matches: markup });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Table>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>Team 1</Table.HeaderCell>\r\n            <Table.HeaderCell>Team 2</Table.HeaderCell>\r\n            <Table.HeaderCell>League</Table.HeaderCell>\r\n            <Table.HeaderCell />\r\n            <Table.HeaderCell>Start date</Table.HeaderCell>\r\n            <Table.HeaderCell />\r\n            <Table.HeaderCell />\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>{this.state.matches}</Table.Body>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default APImatches;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAJA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAAA;;;;;;AACA;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;AADA;;AAKA;AACA;;AADA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AADA;AAIA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;AAGA;;;;;;AACA;;AACA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;;AADA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAfA;AAqBA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AASA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AAgBA;;;;AArJA;AACA;AAuJA;;;;A","sourceRoot":""}