{"version":3,"file":"static/webpack/static\\development\\pages\\admin\\dashboard\\teams.js.e6621dd9d264245bd0ce.hot-update.js","sources":["webpack:///./pages/admin/dashboard/teams.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../../../components/dashboard/Layout/Layout';\r\nimport {\r\n  Divider,\r\n  Grid,\r\n  GridColumn,\r\n  Form,\r\n  Header,\r\n  Label,\r\n  Icon,\r\n  Button,\r\n  Message\r\n} from 'semantic-ui-react';\r\nimport '../../../static/css/dashboard/teams.css';\r\nimport Dropzone from 'react-dropzone';\r\nimport _ from 'lodash';\r\nimport axios from 'axios';\r\nimport { backend } from '../../../config/config';\r\nimport CookieCall from '../../../utils/CookieCall';\r\n\r\nclass Teams extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onDrop = this.onDrop.bind(this);\r\n    this.handleAddTeam = this.handleAddTeam.bind(this);\r\n    this.state = {\r\n      formInputs: { name: '', logo: false },\r\n      formError: { name: false, logo: false },\r\n      formMessage: ''\r\n    };\r\n  }\r\n\r\n  static async getInitialProps(props) {\r\n    const { req } = props;\r\n    const teams = await CookieCall(req, '/api/teams');\r\n\r\n    return teams;\r\n  }\r\n\r\n  onDrop(accepted, rejected) {\r\n    this.clearFormErrors();\r\n    const [file] = accepted;\r\n    this.setState({ formInputs: { ...this.state.formInputs, logo: file } });\r\n  }\r\n\r\n  async handleAddTeam() {\r\n    const nameCheck = !this.state.formInputs.name;\r\n    const logoCheck = !this.state.formInputs.logo;\r\n    this.setState({ formError: { name: nameCheck, logo: logoCheck } });\r\n\r\n    if (!(nameCheck || logoCheck)) {\r\n      const data = new FormData();\r\n      data.append('logo', this.state.formInputs.logo);\r\n      data.append('displayName', this.state.formInputs.name);\r\n\r\n      const response = await axios({\r\n        method: 'post',\r\n        url: '/backend/new_team',\r\n        data: data,\r\n        config: { headers: { 'Content-Type': 'multipart/form-data' } }\r\n      });\r\n\r\n      if (response.data.success) {\r\n        this.setState({\r\n          formMessage: 'success',\r\n          formInputs: { name: '', logo: false },\r\n          formError: { name: false, logo: false }\r\n        });\r\n      } else this.setState({ formMessage: 'error' });\r\n    }\r\n  }\r\n\r\n  clearFormErrors() {\r\n    this.setState({ formError: { name: false, logo: false }, formMessage: '' });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Manage Teams</h1> <Divider />\r\n        <Grid columns=\"2\" className=\"grid-content\">\r\n          <GridColumn width=\"10\">All teams</GridColumn>\r\n          <GridColumn width=\"6\">\r\n            <Header as=\"h2\">Add New Team</Header>\r\n            <Form error success>\r\n              <Form.Field required error={this.state.formError.name}>\r\n                <label>Display name</label>\r\n                <input\r\n                  onChange={e => {\r\n                    this.clearFormErrors();\r\n                    this.setState({\r\n                      formInputs: {\r\n                        ...this.state.formInputs,\r\n                        name: e.target.value\r\n                      }\r\n                    });\r\n                  }}\r\n                  value={this.state.formInputs.name}\r\n                />\r\n              </Form.Field>\r\n              <Form.Field required error={this.state.formError.logo}>\r\n                <label>PNG Logo</label>\r\n                {this.renderDropBox(\r\n                  this.state.formInputs.logo,\r\n                  this.state.formError.logo\r\n                )}\r\n              </Form.Field>\r\n\r\n              <Button\r\n                onClick={e => this.handleAddTeam()}\r\n                className=\"black-bg font-white\">\r\n                Add\r\n              </Button>\r\n\r\n              {this.generateFormMessage(this.state.formMessage)}\r\n            </Form>\r\n          </GridColumn>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderDropBox(logo, error) {\r\n    if (!_.isEmpty(logo)) {\r\n      return (\r\n        <Label size=\"medium\" image className=\"font-white dark-orange-bg\">\r\n          {/* <img src={logo.preview} className=\"logo-snippet\" /> */}\r\n          {logo.name}\r\n          <Icon\r\n            onClick={e => {\r\n              this.setState({\r\n                formInputs: { ...this.state.formInputs, logo: false }\r\n              });\r\n            }}\r\n            name=\"delete\"\r\n          />\r\n        </Label>\r\n      );\r\n    } else {\r\n      const classNameModifier = error ? 'dropdown-div-error' : '';\r\n\r\n      return (\r\n        <Dropzone\r\n          className={`dropdown-div ${classNameModifier}`}\r\n          activeClassName=\"dropdown-div-accepted\"\r\n          rejectClassName=\"dropdown-div-rejected\"\r\n          accept=\"image/png\"\r\n          onDrop={(accepted, rejected) => this.onDrop(accepted, rejected)}>\r\n          {({ isDragAccept, isDragReject }) => {\r\n            if (isDragAccept) {\r\n              return 'The logo look OK. Now drop it.';\r\n            }\r\n            if (isDragReject) {\r\n              return 'This is not a PNG file. ';\r\n            }\r\n            return 'Drop PNG logo here';\r\n          }}\r\n        </Dropzone>\r\n      );\r\n    }\r\n  }\r\n\r\n  generateFormMessage(message) {\r\n    console.log(this.props.initial);\r\n    if (message) {\r\n      const success = message === 'success' ? true : false;\r\n      const header = success ? 'Success' : 'There has been a problem';\r\n      const content = success\r\n        ? 'New team has been succesfuly added to database.'\r\n        : 'No new team has been added to database. Probably a team with such a name already exist.';\r\n      return (\r\n        <Message\r\n          success={success}\r\n          error={!success}\r\n          content={content}\r\n          header={header}\r\n        />\r\n      );\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n\r\nexport default Layout(Teams);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AALA;AAUA;AACA;;;AAQA;AACA;AACA;AAFA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;;AADA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AAVA;AAaA;AAAA;AAAA;AASA;AAAA;AAAA;AACA;AAFA;AAYA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AANA;AAUA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;;;;;;AArJA;;;;;;AACA;;AACA;AACA;;AADA;AAEA;AACA;;;;;;;;;;;;;;;;AAlBA;AACA;AAoKA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}