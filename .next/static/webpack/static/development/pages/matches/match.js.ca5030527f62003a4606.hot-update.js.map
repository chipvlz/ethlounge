{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.ca5030527f62003a4606.hot-update.js","sources":["webpack:///./components/ErrorModal.js","webpack:///./components/match/ConfirmBetModal.js","webpack:///./components/match/Teams.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport store from '../redux/store';\r\nimport { Modal, Message, Button, Header, Icon } from 'semantic-ui-react';\r\nimport { toggleErrorModal } from '../redux/actions';\r\n\r\nclass ErrorModal extends Component {\r\n  render() {\r\n    let { modal } = this.props;\r\n    const list = modal.reasons.map(curr => {\r\n      return <li>{curr}</li>;\r\n    });\r\n\r\n    return (\r\n      <Modal size=\"tiny\" open={modal.isOpen} closeOnDocumentClick={true}>\r\n        <Modal.Header className=\"font-error\">\r\n          <Icon name=\"times circle outline\" />\r\n          {modal.head}\r\n        </Modal.Header>\r\n        <Modal.Content>\r\n          <Modal.Description className=\"font-error\">\r\n            <ul>{list}</ul>\r\n          </Modal.Description>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button\r\n            className=\"dark-orange-bg font-white\"\r\n            onClick={e => store.dispatch(toggleErrorModal())}>\r\n            OK\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorModal;\r\n","import React, { Component } from 'react';\r\nimport store from '../../redux/store';\r\nimport {\r\n  Modal,\r\n  Grid,\r\n  Image,\r\n  Button,\r\n  List,\r\n  Icon,\r\n  Header,\r\n  Label\r\n} from 'semantic-ui-react';\r\nimport { toggleModal } from '../../redux/actions';\r\nimport TokenFromWei from '../../helpers/TokenFromWei';\r\nimport EthLounge from '../../ethereum/EthLounge';\r\nimport { Router } from '../../routes';\r\n\r\nclass ConfirmBetModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleConfirm = this.handleConfirm.bind(this);\r\n    this.closeFinalModal = this.closeFinalModal.bind(this);\r\n    this.state = {\r\n      isLoading: false,\r\n      isCancelDisabled: false,\r\n      isFinalModalSuccessOpen: false,\r\n      isFinalModalSuccessOpen: false,\r\n      isFinalModalErrorOpen: false,\r\n      errorMessage: '',\r\n      transactionInfo: {},\r\n      waitingText: ''\r\n    };\r\n  }\r\n\r\n  closeFinalModal() {\r\n    this.setState({\r\n      isFinalModalErrorOpen: false,\r\n      isFinalModalSuccessOpen: false\r\n    });\r\n    store.dispatch(toggleModal('confirmBetModal'));\r\n  }\r\n\r\n  async handleConfirm(tokensToBet, pickedTeam, account, matchID) {\r\n    console.log(this.state);\r\n    this.setState({\r\n      isLoading: true,\r\n      isCancelDisabled: true,\r\n      waitingText: (\r\n        <Label>\r\n          Please confirm the transaction on Metamask and wait a few seconds.\r\n        </Label>\r\n      )\r\n    });\r\n    const tokens = tokensToBet.map(curr => curr.address);\r\n    const amounts = tokensToBet.map(curr => curr.amount);\r\n\r\n    try {\r\n      const transactionInfo = await EthLounge.methods\r\n        .placeBet(matchID, pickedTeam.slug, tokens, amounts)\r\n        .send({ from: account });\r\n      if (transactionInfo.status) {\r\n        this.setState({\r\n          isFinalModalSuccessOpen: true,\r\n          transactionInfo: transactionInfo\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      this.setState({\r\n        isFinalModalErrorOpen: true,\r\n        errorMessage: err.message.replace('Returned error: ', '')\r\n      });\r\n    }\r\n    this.setState({\r\n      isLoading: false,\r\n      isCancelDisabled: false,\r\n      waitingText: ''\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let { open, tokensToBet, pickedTeam, account, matchID } = this.props;\r\n\r\n    const tokenList = tokensToBet.map(curr => {\r\n      return (\r\n        <List.Item as=\"p\" key={curr.address}>\r\n          <Icon name=\"right triangle\" />\r\n          {TokenFromWei(curr, 'symbol')}\r\n        </List.Item>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Modal size=\"tiny\" open={open}>\r\n        <FinalModalSuccess\r\n          open={this.state.isFinalModalSuccessOpen}\r\n          transactionInfo={this.state.transactionInfo}\r\n          matchID={matchID}\r\n          close={this.closeFinalModal}\r\n        />\r\n        <FinalModalError\r\n          open={this.state.isFinalModalErrorOpen}\r\n          errorMessage={this.state.errorMessage}\r\n          close={this.closeFinalModal}\r\n        />\r\n        <Modal.Header>You are about to place a bet</Modal.Header>\r\n        <Modal.Content>\r\n          <Modal.Description>\r\n            <Grid>\r\n              <Grid.Column width={10}>\r\n                <Header>Your bet:</Header>\r\n                <List className=\"confirm-bet-modal-ul font-dark-orange\" as=\"ul\">\r\n                  {tokenList}\r\n                </List>\r\n                <Header>\r\n                  Picked Team:{' '}\r\n                  <span className=\"font-dark-orange\">{pickedTeam.name}</span>\r\n                </Header>\r\n                <Header>\r\n                  Odds:{' '}\r\n                  <span className=\"font-dark-orange\">{pickedTeam.odds}</span>\r\n                </Header>\r\n                {this.state.waitingText}\r\n              </Grid.Column>\r\n              <Grid.Column verticalAlign=\"middle\" width={6}>\r\n                <Image\r\n                  className=\"confirm-bet-modal-img\"\r\n                  floated=\"right\"\r\n                  size=\"small\"\r\n                  src={`/static/img/teams/${pickedTeam.slug}.png`}\r\n                />\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Modal.Description>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button\r\n            disabled={this.state.isCancelDisabled}\r\n            color=\"black\"\r\n            onClick={e => store.dispatch(toggleModal('confirmBetModal'))}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            loading={this.state.isLoading}\r\n            className=\"dark-orange-bg font-white\"\r\n            onClick={e =>\r\n              this.handleConfirm(tokensToBet, pickedTeam, account, matchID)\r\n            }>\r\n            Confirm\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nclass FinalModalSuccess extends Component {\r\n  render() {\r\n    const { open, close, transactionInfo, matchID } = this.props;\r\n\r\n    const hash = transactionInfo.transactionHash;\r\n\r\n    return (\r\n      <Modal open={open} size=\"tiny\">\r\n        <Modal.Header>Bet placed successfuly</Modal.Header>\r\n        <Modal.Content className=\"word-wrap\">\r\n          <p>\r\n            Transaction hash:{' '}\r\n            <a href={`https://etherscan.io/tx/${hash}`}>{hash}</a>\r\n          </p>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button\r\n            className=\"dark-orange-bg font-white\"\r\n            onClick={e => {\r\n              close();\r\n              Router.push(`/matches/${matchID}`);\r\n            }}>\r\n            Go back\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nclass FinalModalError extends Component {\r\n  render() {\r\n    return (\r\n      <Modal open={this.props.open} size=\"mini\">\r\n        <Modal.Header className=\"font-error\">Placing bet failed</Modal.Header>\r\n        <Modal.Content className=\"font-error word-wrap\">\r\n          <p>{this.props.errorMessage}</p>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button\r\n            className=\"dark-orange-bg font-white\"\r\n            onClick={e => this.props.close()}>\r\n            Go back\r\n          </Button>\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ConfirmBetModal;\r\n","import React, { Component } from 'react';\r\nimport { Grid, Label, Image } from 'semantic-ui-react';\r\nimport store from '../../redux/store';\r\nimport { pickTeam } from '../../redux/actions';\r\n\r\nclass Teams extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  handleClick = (event, team, pickedTeam) => {\r\n    if (this.props.signedIn) {\r\n      if (pickedTeam.slug) {\r\n        if (pickedTeam.slug === team.slug) {\r\n          store.dispatch(pickTeam({}));\r\n          return;\r\n        }\r\n      }\r\n      store.dispatch(pickTeam(team));\r\n    }\r\n  };\r\n\r\n  generateTeamLabel(team, pickedTeam) {\r\n    const style = this.props.signedIn ? { cursor: 'pointer' } : {};\r\n    let classNameModifier =\r\n      pickedTeam.slug == team.slug ? ' team-label-picked' : '';\r\n    let teamCaption =\r\n      pickedTeam.slug == team.slug ? (\r\n        <p className=\"team-name team-name-picked\">{team.name}</p>\r\n      ) : (\r\n        <p className=\"team-name\">{team.name}</p>\r\n      );\r\n\r\n    return (\r\n      <div\r\n        onClick={event => {\r\n          this.handleClick(event, team, pickedTeam);\r\n        }}>\r\n        <Label\r\n          size=\"huge\"\r\n          style={style}\r\n          className={`team-label${classNameModifier}`}>\r\n          <Image src={`/static/img/teams/${team.slug}.png`} />\r\n        </Label>\r\n        {teamCaption}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  generatePercentage(teams, index) {\r\n    //const sumOdds = teams[0].odds + teams[1].odds;\r\n    const percentage = Math.round((1 / teams[index].odds) * 100) + '%';\r\n\r\n    if (index === 0)\r\n      return (\r\n        <Label as=\"a\" color=\"black\" ribbon>\r\n          <p className=\"team-percentage\">{percentage}</p>\r\n          <p className=\"team-odds\">x {teams[index].odds}</p>\r\n        </Label>\r\n      );\r\n\r\n    return (\r\n      <Label as=\"a\" color=\"black\" ribbon=\"right\">\r\n        <p className=\"team-percentage\">{percentage}</p>\r\n        <p className=\"team-odds\">x {teams[index].odds}</p>\r\n      </Label>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let { teams, pickedTeam } = this.props;\r\n\r\n    if (teams)\r\n      return (\r\n        <Grid className=\"teams-grid\" padded>\r\n          <Grid.Row>\r\n            <Grid.Column />\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Grid.Column width={2}>\r\n              {this.generatePercentage(teams, 0)}\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={5} verticalAlign=\"middle\" textAlign=\"center\">\r\n              {this.generateTeamLabel(teams[0], pickedTeam)}\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={2} verticalAlign=\"middle\" textAlign=\"center\">\r\n              <Label color=\"black\">VS</Label>\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={5} verticalAlign=\"middle\" textAlign=\"center\">\r\n              {this.generateTeamLabel(teams[1], pickedTeam)}\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={2}>\r\n              {this.generatePercentage(teams, 1)}\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <Grid.Column />\r\n          </Grid.Row>\r\n        </Grid>\r\n      );\r\n\r\n    return '0';\r\n  }\r\n}\r\n\r\nexport default Teams;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAMA;AACA;AAAA;AAAA;AAFA;AAQA;;;;AA3BA;AACA;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAcA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;AAEA;;;;;;AACA;AACA;AACA;AACA;AACA;AAHA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;;;AAGA;AAEA;AAAA;AACA;;AAHA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;;AACA;AACA;AACA;AACA;AAFA;AACA;;AAIA;AACA;AACA;AACA;AAHA;AACA;;;;;;;;;;;;;;;AAMA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AASA;AAAA;AAEA;AAAA;AAAA;AAKA;AAAA;AAIA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAHA;AAWA;;;;AAxIA;AACA;AA0IA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAWA;;;;AA3BA;AACA;AA6BA;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AAFA;AAQA;;;;AAjBA;AACA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9MA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAfA;AAEA;AACA;;;AAaA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAEA;AAAA;AAGA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAIA;AAAA;AAKA;;;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;;;AAEA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAKA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AAUA;AACA;;;;AArGA;AACA;AAuGA;;;;A","sourceRoot":""}