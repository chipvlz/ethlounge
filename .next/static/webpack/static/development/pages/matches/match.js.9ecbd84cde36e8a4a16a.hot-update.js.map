{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.9ecbd84cde36e8a4a16a.hot-update.js","sources":["webpack:///./components/match/Teams.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Image, Label, Rail, Segment } from 'semantic-ui-react';\r\nimport { backend } from '../../config/config';\r\nimport { pickTeam } from '../../redux/match/actions';\r\nimport store from '../../redux/store';\r\nimport DateFormatter from '../../utils/DateFormatter';\r\n\r\nclass Teams extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  handleClick = (user, team, pickedTeam) => {\r\n    if (user) {\r\n      if (pickedTeam._id === team._id) {\r\n        store.dispatch(pickTeam({}));\r\n        return;\r\n      }\r\n      store.dispatch(pickTeam(team));\r\n    }\r\n  };\r\n\r\n  renderTeamLabel(user, team, pickedTeam) {\r\n    const style = user ? { cursor: 'pointer' } : {};\r\n    let classNameModifier =\r\n      pickedTeam._id == team._id ? ' team-label-picked' : '';\r\n    let teamCaption =\r\n      pickedTeam._id == team._id ? (\r\n        <p className=\"team-name team-name-picked\">{team.displayName}</p>\r\n      ) : (\r\n        <p className=\"team-name\">{team.displayName}</p>\r\n      );\r\n\r\n    return (\r\n      <div\r\n        onClick={event => {\r\n          this.handleClick(user, team, pickedTeam);\r\n        }}>\r\n        <Label\r\n          size=\"huge\"\r\n          style={style}\r\n          className={`team-label${classNameModifier}`}>\r\n          <Image\r\n            className=\"undragable\"\r\n            src={`${backend}/img/teams/${team._id}.png`}\r\n          />\r\n        </Label>\r\n        <div style={style}>{teamCaption}</div>{' '}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderOdds(match, index) {\r\n    const percentageAndOdds = (\r\n      <div>\r\n        <p className=\"team-percentage\">{match.teams[index].percentages}%</p>\r\n        <p className=\"team-odds\">x {match.teams[index].odds.toFixed(2)}</p>\r\n      </div>\r\n    );\r\n\r\n    if (index === 0)\r\n      return (\r\n        <Label color=\"black\" ribbon>\r\n          {percentageAndOdds}\r\n        </Label>\r\n      );\r\n\r\n    return (\r\n      <Label color=\"black\" ribbon=\"right\">\r\n        {percentageAndOdds}\r\n      </Label>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let { match, pickedTeam, user } = this.props;\r\n\r\n    if (teams)\r\n      return (\r\n        <div>\r\n          <Grid className=\"teams-grid\" padded>\r\n            <Grid.Row>\r\n              <Grid.Column />\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column width={2}>{this.renderOdds(match, 0)}</Grid.Column>\r\n\r\n              <Grid.Column width={5} verticalAlign=\"middle\" textAlign=\"center\">\r\n                {this.renderTeamLabel(user, match.teams[0], pickedTeam)}\r\n              </Grid.Column>\r\n\r\n              <Grid.Column width={2} verticalAlign=\"middle\" textAlign=\"center\">\r\n                <Label color=\"black\">VS</Label>\r\n              </Grid.Column>\r\n\r\n              <Grid.Column width={5} verticalAlign=\"middle\" textAlign=\"center\">\r\n                {this.renderTeamLabel(user, match.teams[1], pickedTeam)}\r\n              </Grid.Column>\r\n\r\n              <Grid.Column width={2}>{this.renderOdds(match, 1)}</Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              <Grid.Column />\r\n            </Grid.Row>\r\n          </Grid>\r\n        </div>\r\n      );\r\n\r\n    return '';\r\n  }\r\n}\r\n\r\nexport default Teams;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAbA;AAEA;AACA;;;AAWA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAEA;AAAA;AAGA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAKA;AAAA;AAGA;;;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAIA;AAEA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAIA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AASA;AACA;;;;AAtGA;AACA;AAwGA;;;;A","sourceRoot":""}