{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.8a3e8bdd04203964bfd0.hot-update.js","sources":["webpack:///./components/match/BettingBox.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, List, Label, Icon } from 'semantic-ui-react';\r\nimport Token from './Token';\r\nimport _ from 'lodash';\r\n\r\nimport BettingBoxToken from './BettingBoxToken';\r\nimport RangeSlider from './RangeSlider';\r\n\r\nclass BettingBox extends Component {\r\n  NUMBER_OF_BOXES = 4;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  renderBetInfo(bet, odds) {\r\n    let statusIcon, status, statusClassName;\r\n    switch (bet.state) {\r\n      case 'pending': {\r\n        statusClassName = 'bet-info-status-pending';\r\n        statusIcon = '';\r\n        break;\r\n      }\r\n\r\n      case 'won': {\r\n        statusClassName = 'bet-info-status-won';\r\n        statusIcon = 'trophy';\r\n        break;\r\n      }\r\n\r\n      case 'lost': {\r\n        statusClassName = 'bet-info-status-lost';\r\n        statusIcon = 'minus';\r\n        break;\r\n      }\r\n    }\r\n    status = bet.state.toUpperCase();\r\n\r\n    return (\r\n      <div>\r\n        <List className=\"bet-info\">\r\n          <List.Item>\r\n            <Label className=\"orange-label-light\" horizontal>\r\n              PICKED TEAM\r\n            </Label>\r\n            <span>\r\n              <strong>{bet.team.displayName}</strong>\r\n            </span>\r\n          </List.Item>\r\n          <List.Item>\r\n            <Label className=\"orange-label-light\" horizontal>\r\n              STATUS\r\n            </Label>\r\n            <span className={statusClassName}>\r\n              <strong>{status}</strong> <Icon name={statusIcon} />\r\n            </span>\r\n          </List.Item>\r\n          <List.Item>\r\n            <Label className=\"orange-label-light\" horizontal>\r\n              ESTIMATED BET VALUE\r\n            </Label>\r\n            <span>\r\n              <strong>{` ${bet.estimatedBetValue.toFixed(2)}$`}</strong>\r\n            </span>\r\n          </List.Item>\r\n          <List.Item>\r\n            <Label className=\"orange-label-light\" horizontal>\r\n              ESTIMATED REWARD\r\n            </Label>\r\n            <span>\r\n              <strong>{` ${(bet.estimatedBetValue * odds).toFixed(\r\n                2\r\n              )}$`}</strong>\r\n            </span>\r\n          </List.Item>\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderTokensToBet(tokens) {\r\n    const items = [];\r\n\r\n    for (let i = 0; i < this.NUMBER_OF_BOXES; i++) {\r\n      const token = tokens[i] || null;\r\n      items.push(\r\n        <Grid.Row className=\"betting-box-row\" key={i}>\r\n          <Grid.Column>\r\n            <BettingBoxToken token={token} />\r\n          </Grid.Column>\r\n          <Grid.Column verticalAlign=\"middle\">\r\n            <RangeSlider\r\n              prices={this.props.prices}\r\n              token={token}\r\n              toBet={tokens}\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      );\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  renderTokensBet(tokens) {\r\n    const items = [];\r\n\r\n    for (let i = 0; i < this.NUMBER_OF_BOXES; i++) {\r\n      const token = tokens[i] || null;\r\n      items.push(\r\n        <Grid.Row className=\"betting-box-row\" key={i}>\r\n          <Grid.Column width={7}>\r\n            <BettingBoxToken token={token} />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      );\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  render() {\r\n    const { tokens, bet, teams } = this.props;\r\n\r\n    if (!bet)\r\n      return (\r\n        <div className=\"betting-box\">\r\n          <Grid style={{ paddingTop: '1em' }} columns=\"equal\">\r\n            {this.renderTokensToBet(tokens)}\r\n          </Grid>\r\n        </div>\r\n      );\r\n\r\n    const odds = _.find(teams, { id: bet.teamID }).odds;\r\n\r\n    return (\r\n      <div className=\"betting-box\">\r\n        <Grid columns=\"equal\">\r\n          <Grid.Row>\r\n            <Grid.Column>{this.renderTokensBet(bet.tokensBet)}</Grid.Column>\r\n            <Grid.Column>{this.renderBetInfo(bet, odds)}</Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BettingBox;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAjBA;AACA;AAkBA;AAEA;AAEA;AAAA;AAEA;AAAA;AAAA;AAQA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAQA;AAAA;AAAA;AAYA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAQA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAQA;;;;AAzIA;AACA;AA2IA;;;;A","sourceRoot":""}