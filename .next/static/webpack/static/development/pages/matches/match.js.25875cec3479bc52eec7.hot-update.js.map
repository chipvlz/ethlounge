{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.25875cec3479bc52eec7.hot-update.js","sources":["webpack:///./components/Layout/Menu.js"],"sourcesContent":["import React, { Component } from 'react';\nimport {\n  Button,\n  Menu,\n  Image,\n  Icon,\n  Modal,\n  Message,\n  Form,\n  Input,\n  Label,\n  Grid,\n  List\n} from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport store from '../../redux/store';\nimport makeBlockie from 'ethereum-blockies-base64';\nimport axios from 'axios';\nimport MenuUser from './MenuUser';\nimport IsUsernameOk from '../../utils/FormValidation/IsUsernameOk';\nimport IsPasswordOk from '../../utils/FormValidation/IsPasswordOk';\nimport IsEmailOk from '../../utils/FormValidation/isEmailOk';\n\nclass TopMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSignUp = this.handleSignUp.bind(this);\n    this.state = {\n      username: '',\n      email: '',\n      password: '',\n      password_2: '',\n      signUpErrors: [],\n      signUpOpen: false,\n      signInOpen: false\n    };\n  }\n\n  renderRightMenu(user) {\n    switch (user) {\n      case false: {\n        return (\n          <div className=\"auth-buttons\">\n            <Button\n              onClick={e => this.setState({ signInOpen: true })}\n              color=\"black\">\n              Sign in\n            </Button>\n            <span className=\"or\">or</span>\n            <Button\n              onClick={e => this.setState({ signUpOpen: true })}\n              color=\"black\"\n              className=\"margin-right-1em\">\n              Sign up\n            </Button>\n          </div>\n        );\n      }\n\n      case null: {\n        return '';\n      }\n\n      default: {\n        return <MenuUser user={user} />;\n      }\n    }\n  }\n\n  async handleSignUp() {\n    const { username, password, password_2, email } = this.state;\n\n    const signUpErrors = [];\n\n    const isUsernameOk = IsUsernameOk(username);\n    if (isUsernameOk !== true) signUpErrors.push(isUsernameOk);\n\n    const isPasswordOk = IsPasswordOk(password, password_2);\n    if (isPasswordOk !== true) signUpErrors.push(isPasswordOk);\n\n    const isEmailOk = IsEmailOk(email);\n    if (isEmailOk !== true) signUpErrors.push(isEmailOk);\n\n    if (signUpErrors.length > 0) {\n      this.setState({ signUpErrors });\n      return;\n    }\n\n    const response = await axios({\n      method: 'post',\n      url: '/register',\n      data: { username, password, email },\n      config: { headers: { 'Content-Type': 'multipart/form-data' } }\n    });\n\n    if (!response.data.errors) {\n      window.location.href = response.request.responseURL;\n    } else {\n      this.setState({\n        signUpErrors: response.data.errors\n      });\n    }\n  }\n\n  isButtonDisabled(inputs) {\n    const ok = inputs.every(curr => curr.length > 0);\n\n    return !ok;\n  }\n\n  renderAvatar(username) {\n    if (IsUsernameOk(username) === true)\n      return (\n        <div className=\"sign-up-avatar-box\">\n          <p>Your avatar:</p>\n          <Image src={makeBlockie(username)} />\n        </div>\n      );\n\n    return (\n      <div className=\"sign-up-avatar-box\">\n        <p>Your avatar:</p>\n        <Image\n          className=\"sign-up-avatar-box-img-placeholder\"\n          src={makeBlockie('dfgdasd')}\n        />\n      </div>\n    );\n  }\n\n  renderSignUpModal(open) {\n    return (\n      <Modal open={open} size=\"small\">\n        <Modal.Header className=\"modal-header\">\n          Sign up as a new user\n        </Modal.Header>\n        <Modal.Content>\n          <Grid>\n            <Grid.Row>\n              <Grid.Column width={10}>\n                <Form>\n                  <Form.Field>\n                    <label>Username</label>\n                    <Input\n                      onChange={e => {\n                        this.setState({ username: e.target.value });\n                        this.resetErrors();\n                      }}\n                      value={this.state.username}>\n                      <input />\n                    </Input>\n                    <span className=\"sign-up-hint\">\n                      Username should contain between 3 and 15 characters.\n                    </span>\n                  </Form.Field>\n\n                  <Form.Field>\n                    <label>E-mail</label>\n                    <Input\n                      onChange={e => {\n                        this.setState({ email: e.target.value });\n                        this.resetErrors();\n                      }}\n                      value={this.state.email}>\n                      <input />\n                    </Input>\n                  </Form.Field>\n\n                  <Form.Field>\n                    <label>Password</label>\n                    <input\n                      type=\"password\"\n                      onChange={e => {\n                        this.setState({ password: e.target.value });\n                        this.resetErrors();\n                      }}\n                      value={this.state.password}\n                    />\n                    <span className=\"sign-up-hint\">\n                      Password should contain at least 8 characters.\n                    </span>\n                  </Form.Field>\n\n                  <Form.Field>\n                    <label>Repeat password</label>\n                    <input\n                      type=\"password\"\n                      onChange={e => {\n                        this.setState({ password_2: e.target.value });\n                        this.resetErrors();\n                      }}\n                      value={this.state.password_2}\n                    />\n                  </Form.Field>\n                </Form>\n                {this.renderSingUpErrors(this.state.signUpErrors)}\n              </Grid.Column>\n              <Grid.Column width={6} verticalAlign=\"middle\" textAlign=\"center\">\n                {this.renderAvatar(this.state.username)}\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            className=\"dark-button\"\n            onClick={e => {\n              this.setState({\n                signUpOpen: false,\n                username: '',\n                password: '',\n                password_2: '',\n                signUpErrors: []\n              });\n            }}>\n            Back\n          </Button>\n\n          <Button\n            className=\"orange-button-dark\"\n            onClick={e => this.handleSignUp()}\n            disabled={this.isButtonDisabled([\n              this.state.username,\n              this.state.password,\n              this.state.password_2,\n              this.state.email\n            ])}>\n            Sign Up\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n\n  renderSignInModal(open) {\n    return (\n      <Modal open={open} size=\"small\">\n        <Modal.Header className=\"modal-header\">Sign in</Modal.Header>\n        <Modal.Content>\n          <Form id=\"login_form\" action=\"/login\" method=\"get\">\n            <Form.Field>\n              <label>Username</label>\n              <input\n                name=\"username\"\n                onChange={e => this.setState({ username: e.target.value })}\n                value={this.state.username}\n              />\n            </Form.Field>\n\n            <Form.Field>\n              <label>Password</label>\n              <input\n                name=\"password\"\n                type=\"password\"\n                onChange={e => this.setState({ password: e.target.value })}\n                value={this.state.password}\n              />\n            </Form.Field>\n          </Form>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            className=\"dark-button\"\n            onClick={e => {\n              this.setState({\n                signInOpen: false,\n                username: '',\n                password: ''\n              });\n            }}>\n            Back\n          </Button>\n\n          <Button\n            type=\"submit\"\n            form=\"login_form\"\n            className=\"orange-button-dark\"\n            disabled={this.isButtonDisabled([\n              this.state.username,\n              this.state.password\n            ])}>\n            Sign In\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n\n  render() {\n    return (\n      <Menu inverted size=\"large\" className=\"top-menu\" icon=\"labeled\">\n        <Menu.Item className=\"item-logo\">\n          <Image className=\"logo\" src=\"/static/img/logo/logo.png\" />\n        </Menu.Item>\n        <Menu.Item>\n          <Icon name=\"chess knight\" />\n          My Bets\n        </Menu.Item>\n        <Menu.Item>\n          <Icon name=\"angle double down\" />\n          Deposit\n        </Menu.Item>\n\n        <Menu.Item>\n          <Icon name=\"angle double up\" />\n          Withdraw\n        </Menu.Item>\n\n        <Menu.Item>\n          <Icon name=\"question circle outline\" />\n          FAQ\n        </Menu.Item>\n\n        <Menu.Item className=\"menu-right-item\" position=\"right\">\n          {this.renderRightMenu(this.props.user)}\n        </Menu.Item>\n\n        {this.renderSignUpModal(this.state.signUpOpen)}\n\n        {this.renderSignInModal(this.state.signInOpen)}\n      </Menu>\n    );\n  }\n\n  resetErrors() {\n    this.setState({ signUpErrors: [] });\n  }\n\n  renderSingUpErrors(errors) {\n    if (errors[0]) {\n      return (\n        <Message\n          error\n          header=\"There were some errors in your sign up form.\"\n          list={errors}\n        />\n      );\n    }\n    return '';\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.login.user\n  };\n};\n\nexport default connect(mapStateToProps)(TopMenu);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAHA;AAYA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AA1BA;AA4BA;;;;;;;;;;;;;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;AACA;AAAA;AAAA;;;;;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AAAA;AAAA;AAEA;AACA;;;AAEA;AACA;AAEA;AAAA;AAEA;AAAA;AAIA;AACA;AAAA;AAGA;AACA;AAFA;AAMA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AALA;AAQA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AALA;AAaA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAQA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AANA;AAYA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAVA;AAeA;AACA;AAAA;AAAA;AACA;AAHA;AAcA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AARA;AAaA;AACA;AACA;AACA;AAJA;AAaA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAIA;AAAA;AAKA;AAAA;AAKA;AAAA;AAIA;AAAA;AAAA;AASA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;;;;AA5TA;AACA;AA8TA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;A","sourceRoot":""}