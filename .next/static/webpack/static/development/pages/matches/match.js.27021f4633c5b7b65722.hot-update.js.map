{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.27021f4633c5b7b65722.hot-update.js","sources":["webpack:///./components/RangeSlider.js","webpack:///./components/match/BettingBox.js","webpack:///./pages/matches/match.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Slider from 'react-rangeslider';\r\nimport Big from 'big.js';\r\nimport EstimateBetValue from '../helpers/EstimateBetValue';\r\nimport { changeTokenPosition } from '../redux/actions';\r\nimport store from '../redux/store';\r\n\r\nclass RangeSlider extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);            \r\n        this.handleRange = this.handleRange.bind(this);\r\n\r\n        this.state = {value: 1000}\r\n    }\r\n\r\n    handleRange = (val) => {\r\n        const { token } = this.props;\r\n        this.setState({value: val})\r\n        const change = val/1000;\r\n        const newAmount = `${Big(token.initialAmount).mul(change).toFixed(0)}`;\r\n        token.amount = newAmount;\r\n        this.store.dispatch(updateEstimateBet(token));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Slider min={1} max={1000} step={10} tooltip={false} value={this.state.value} onChange={(val) => this.handleRange(val)}  onChangeComplete={(event) => {EstimateBetValue(this.props.toBet, this.props.prices)}}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RangeSlider;","import React, { Component } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport BettingBoxToken from './BettingBoxToken';\r\nimport RangeSlider from '../RangeSlider';\r\n\r\n\r\nclass BettingBox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    renderTokens(tokens) { \r\n        let bettingBoxes = [];\r\n        const numberOfBoxes = 4;\r\n        \r\n\r\n        for (let i = 0; i < numberOfBoxes; i++) {\r\n            let pos = `betting-box-${i}`;       \r\n            let tokenProp;\r\n            let rangeSlider = '';\r\n\r\n            for (let token of tokens) {\r\n                if (token.position === pos) {\r\n                    tokenProp = token;\r\n                    rangeSlider = <RangeSlider prices={this.props.prices} token={token} toBet={tokens}></RangeSlider>\r\n                }\r\n            }\r\n            \r\n            bettingBoxes.push(\r\n                    <Grid.Row key={pos}>\r\n                        <Grid.Column width={7}>\r\n                            <BettingBoxToken pos={pos} droppedToken={tokenProp} />                        \r\n                        </Grid.Column>\r\n                        <Grid.Column width={9} verticalAlign=\"middle\">\r\n                            {rangeSlider}\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n            );\r\n        }\r\n\r\n        return bettingBoxes;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"betting-box\">\r\n                <Grid columns='equal'>\r\n                    {this.renderTokens(this.props.tokens)}\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BettingBox;","import React, { Component } from 'react';\r\nimport Layout from '../../components/Layout/Layout';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport { DragDropContext } from 'react-dnd';\r\nimport { connect } from 'react-redux';\r\nimport { Grid, Button, List, Label, Modal} from 'semantic-ui-react';\r\nimport BettingBox from '../../components/match/BettingBox';\r\nimport TokenBox from '../../components/match/TokenBox';\r\nimport { changeTokenPosition, changeTokenAmount, updatePrices, toggleModal } from '../../redux/actions';\r\nimport CryptoPrices from '../../helpers/CryptoPrices';\r\nimport store from '../../redux/store';\r\nimport Teams from '../../components/match/Teams';\r\nimport _ from 'lodash';\r\nimport ErrorModal from '../../components/ErrorModal';\r\n\r\nclass Match extends Component {\r\n\r\n    static async getInitialProps(props) {\r\n        const matchID = props.query.id;\r\n        \r\n        // This information will be pulled from database //\r\n        const teams = [{\r\n            name: 'Fnatic',\r\n            slug: 'fnatic',\r\n            imgUrl: `../../img/teams/fnatic.png`,\r\n            odds: 1.56\r\n        }, {\r\n            name: 'Gambit',\r\n            slug: 'gambit',\r\n            imgUrl: `../../img/teams/gambit.png`,\r\n            odds: 2.77\r\n        }];\r\n\r\n        return { teams };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const prices = await CryptoPrices();\r\n        store.dispatch(updatePrices(prices))\r\n    }\r\n\r\n    handleClick() {\r\n        const errorHead = \"You forgot to do the following\"\r\n        const errors = [];\r\n        if (!this.props.signedIn) errors.push('Please log in to place bets.');\r\n        if (this.props.tokens.toBet.length === 0) errors.push('Please place at least one token in order to place a bet.');\r\n        if (_.isEmpty(this.props.pickedTeam)) errors.push('Please pick a team.');\r\n        if (errors.length > 0) { store.dispatch(toggleModal(errorHead, errors)); console.log(this.props); return; }\r\n\r\n        //handle correct PLACE BET\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (                \r\n            <Grid relaxed>\r\n                <Grid.Column width={8}>\r\n                    <Teams teams={this.props.initial.teams} pickedTeam={this.props.pickedTeam} signedIn={this.props.signedIn} />\r\n                    LAST BETS:\r\n                </Grid.Column>\r\n                <Grid.Column width={8}>\r\n                    <h2>Place bet</h2>\r\n                    <BettingBox prices={this.props.prices} tokens={this.props.tokens.toBet}  />\r\n                    <div className=\"bet-container\">\r\n                        <Button onClick={(event) => this.handleClick()} className=\"button-bet\" size=\"large\" color=\"black\" >\r\n                            Place bet\r\n                        </Button>\r\n                        <ErrorModal modal={this.props.errorModal} />\r\n                        <List relaxed floated=\"right\" className=\"info-bet\">\r\n                            {this.renderBetValue(this.props.betValue)}\r\n                            {this.renderEstimatedReward(this.props.betValue)}                 \r\n                        </List>\r\n                    </div>\r\n                        <h2>Balances</h2>\r\n                    <TokenBox signedIn={this.props.signedIn} tokens={this.props.tokens.wallet} />\r\n                </Grid.Column>                             \r\n            </Grid>                \r\n        );\r\n    }\r\n\r\n    renderBetValue(betValue) {\r\n        if (this.props.tokens.toBet.length > 0)\r\n        return <List.Item><Label className=\"orange-label\" horizontal>ESTIMATED BET VALUE</Label><strong>{` ${betValue}$`}</strong></List.Item>;\r\n\r\n        return '';\r\n    }\r\n\r\n    renderEstimatedReward(betValue) {\r\n        if (this.props.tokens.toBet.length > 0 && !(_.isEmpty(this.props.pickedTeam)) )\r\n        return <List.Item><Label className=\"orange-label\" horizontal>ESTIMATED RETURN</Label><strong>{` ${(parseFloat(betValue) * this.props.pickedTeam.odds).toFixed(2)}$`}</strong></List.Item>;\r\n\r\n        return '';\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changePosition: (token, pos) => {\r\n            dispatch(changeTokenPosition(token, pos));\r\n        },\r\n\r\n        handleRange: (token) => {\r\n            dispatch(changeTokenAmount(token))\r\n        }\r\n    }\r\n}\r\n  \r\n\r\nconst mapStateToProps = (state) => {\r\n        return {\r\n            tokens: state.tokens,\r\n            signedIn: state.signedIn,\r\n            betValue: state.betValue,\r\n            prices: state.prices,\r\n            pickedTeam: state.pickedTeam,\r\n            errorModal: state.errorModal\r\n        }\r\n    \r\n  }\r\n\r\nMatch = DragDropContext(HTML5Backend)(Match);\r\n\r\nexport default Layout(connect(mapStateToProps, mapDispatchToProps)(Match));"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAbA;AAEA;AAAA;AAAA;AAJA;AAKA;AACA;;;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AAtBA;AACA;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAKA;;;;AA9CA;AACA;AAgDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAIA;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;;;;;;AA3EA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAnBA;AACA;AA+EA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAPA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}