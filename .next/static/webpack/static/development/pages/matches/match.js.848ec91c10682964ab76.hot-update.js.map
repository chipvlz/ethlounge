{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.848ec91c10682964ab76.hot-update.js","sources":["webpack:///./components/match/ConfirmBetModal.js","webpack:///./pages/matches/match.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport store from '../../redux/store';\r\nimport { Modal, Grid, Image, Button, List, Icon, Header } from 'semantic-ui-react'\r\nimport { toggleModal } from '../../redux/actions';\r\nimport TokenFromWei from '../../helpers/TokenFromWei';\r\nimport EthLounge from '../../ethereum/EthLounge';\r\n\r\nclass ConfirmBetModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleConfirm = this.handleConfirm.bind(this);\r\n        this.state = {isLoading: false, isFinalModalOpen: false};\r\n    }\r\n\r\n    async handleConfirm(tokensToBet, pickedTeam, account, matchID) {\r\n        this.setState({isLoading: true});\r\n        const tokens = tokensToBet.map((curr) => curr.address);\r\n        const amounts = tokensToBet.map((curr) => curr.amount);\r\n\r\n        await EthLounge.methods.placeBet(matchID, pickedTeam.slug, tokens, amounts).send({from: account});\r\n\r\n        this.setState({isLoading: false});\r\n        \r\n    }\r\n\r\n    render() {\r\n        let { open, tokensToBet, pickedTeam, account, matchID } = this.props;\r\n\r\n        const tokenList = tokensToBet.map((curr) => {\r\n            return <List.Item as='p'><Icon name='right triangle' />{TokenFromWei(curr, 'symbol')}</List.Item>\r\n        });\r\n\r\n        return (\r\n                <Modal size='tiny' open={open}>\r\n                <FinalModal />\r\n                    <Modal.Header>You are about to place a bet</Modal.Header>\r\n                    <Modal.Content>\r\n                        \r\n                        <Modal.Description>\r\n                            <Grid>\r\n                                <Grid.Column width={10}>\r\n                                    <Header>Your bet:</Header>\r\n                                    <List className=\"confirm-bet-modal-ul font-dark-orange\" as='ul'>{tokenList}</List>\r\n                                    <Header>Picked Team: <span className=\"font-dark-orange\">{pickedTeam.name}</span></Header>\r\n                                    <Header>Odds: <span className=\"font-dark-orange\">{pickedTeam.odds}</span></Header>                        \r\n                                </Grid.Column>\r\n                                <Grid.Column verticalAlign=\"middle\" width={6}><Image className=\"confirm-bet-modal-img\" floated=\"right\" size='small' src={`/static/img/teams/${pickedTeam.slug}.png`} />\r\n                                </Grid.Column> \r\n                            </Grid>\r\n                                                                    \r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>                    \r\n                        <Button color=\"black\" onClick={(e) => {store.dispatch(toggleModal('confirmBetModal'))}}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button loading={this.state.isLoading} className=\"dark-orange-bg font-white\" onClick={e => this.handleConfirm(tokensToBet, pickedTeam, account, matchID)}>\r\n                            Confirm\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n    \r\n        );\r\n    }\r\n}\r\n\r\nclass FinalModal extends Component {\r\n  \r\n    render() { \r\n      return (\r\n        <Modal  size='tiny'>\r\n          <Modal.Header>Modal #2</Modal.Header>\r\n          <Modal.Content>\r\n            <p>That's everything!</p>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            \r\n          </Modal.Actions>\r\n        </Modal>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default ConfirmBetModal;","import React, { Component } from 'react';\r\nimport Layout from '../../components/Layout/Layout';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport { DragDropContext } from 'react-dnd';\r\nimport { connect } from 'react-redux';\r\nimport { Grid, Button, List, Label, Modal} from 'semantic-ui-react';\r\nimport BettingBox from '../../components/match/BettingBox';\r\nimport TokenBox from '../../components/match/TokenBox';\r\nimport { updatePrices, toggleErrorModal, toggleModal } from '../../redux/actions';\r\nimport CryptoPrices from '../../helpers/CryptoPrices';\r\nimport store from '../../redux/store';\r\nimport Teams from '../../components/match/Teams';\r\nimport _ from 'lodash';\r\nimport ErrorModal from '../../components/ErrorModal';\r\nimport ConfirmBetModal from '../../components/match/ConfirmBetModal';\r\n\r\nclass Match extends Component {\r\n\r\n    static async getInitialProps(props) {\r\n        const matchID = props.query.id;\r\n        \r\n        // This information will be pulled from database //\r\n        const teams = [{\r\n            name: 'Fnatic',\r\n            slug: 'fnatic',\r\n            imgUrl: `../../img/teams/fnatic.png`,\r\n            odds: 1.56\r\n        }, {\r\n            name: 'Gambit',\r\n            slug: 'gambit',\r\n            imgUrl: `../../img/teams/gambit.png`,\r\n            odds: 2.77\r\n        }];\r\n\r\n        const gameInfo = {matchID, teams};\r\n\r\n        return { gameInfo };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const prices = await CryptoPrices();\r\n        store.dispatch(updatePrices(prices))\r\n    }\r\n\r\n    handleClick(event, tokensToBet) {\r\n        event.preventDefault();\r\n        const errorHead = \"You forgot to do the following\"\r\n        const errors = [];\r\n        if (!this.props.signedIn) errors.push('Please log in to place bets.');\r\n        if (tokensToBet.length === 0) errors.push('Please place at least one token in order to place a bet.');\r\n        if (_.isEmpty(this.props.pickedTeam)) errors.push('Please pick a team.');\r\n        if (errors.length > 0) { store.dispatch(toggleErrorModal(errorHead, errors)); return; }\r\n\r\n        store.dispatch(toggleModal('confirmBetModal'));\r\n               \r\n    }\r\n\r\n    render() {\r\n        return (                \r\n            <Grid relaxed>\r\n                <ErrorModal modal={this.props.errorModal} />\r\n                <ConfirmBetModal open={this.props.confirmBetModal.isOpen} tokensToBet={this.props.tokens.toBet} pickedTeam={this.props.pickedTeam} account={this.props.account} matchID={this.props.gameInfo.matchID}/>\r\n\r\n                <Grid.Column width={8}>\r\n                    <Teams teams={this.props.initial.gameInfo.teams} pickedTeam={this.props.pickedTeam} signedIn={this.props.signedIn} />\r\n                    LAST BETS:\r\n                </Grid.Column>\r\n                <Grid.Column width={8}>\r\n                    <h2>Place bet</h2>\r\n                    <BettingBox prices={this.props.prices} tokens={this.props.tokens.toBet}  />\r\n                    <div className=\"bet-container\">\r\n                        <Button onClick={(event) => this.handleClick(event, this.props.tokens.toBet)} className=\"button-bet\" size=\"large\" color=\"black\" >\r\n                            Place bet\r\n                        </Button>\r\n                        <List relaxed floated=\"right\" className=\"info-bet\">\r\n                            {this.renderBetValue(this.props.betValue)}\r\n                            {this.renderEstimatedReward(this.props.betValue)}                 \r\n                        </List>\r\n                    </div>\r\n                        <h2>Balances</h2>\r\n                    <TokenBox signedIn={this.props.signedIn} tokens={this.props.tokens.wallet} />\r\n                </Grid.Column>                             \r\n            </Grid>                \r\n        );\r\n    }\r\n\r\n    renderBetValue(betValue) {\r\n        if (this.props.tokens.toBet.length > 0)\r\n        return <List.Item><Label className=\"orange-label\" horizontal>ESTIMATED BET VALUE</Label><strong>{` ${betValue}$`}</strong></List.Item>;\r\n\r\n        return '';\r\n    }\r\n\r\n    renderEstimatedReward(betValue) {\r\n        if (this.props.tokens.toBet.length > 0 && !(_.isEmpty(this.props.pickedTeam)) )\r\n        return <List.Item><Label className=\"orange-label\" horizontal>ESTIMATED RETURN</Label><strong>{` ${(parseFloat(betValue) * this.props.pickedTeam.odds).toFixed(2)}$`}</strong></List.Item>;\r\n\r\n        return '';\r\n    }\r\n}\r\n  \r\n\r\nconst mapStateToProps = (state) => {\r\n        return {\r\n            tokens: state.tokens,\r\n            signedIn: state.signedIn,\r\n            betValue: state.betValue,\r\n            prices: state.prices,\r\n            pickedTeam: state.pickedTeam,\r\n            errorModal: state.errorModal,\r\n            confirmBetModal: state.confirmBetModal,\r\n            account: state.account\r\n        }\r\n    \r\n  }\r\n\r\nMatch = DragDropContext(HTML5Backend)(Match);\r\n\r\nexport default Layout(connect(mapStateToProps)(Match));"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAIA;AACA;;;;;;AACA;;;;;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAOA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAzDA;AACA;AA2DA;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAUA;;;;AAdA;AACA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAIA;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;;;;;;AAhFA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AArBA;AACA;AAqFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}