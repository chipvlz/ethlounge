{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.a694af9e2bf9955f7c84.hot-update.js","sources":["webpack:///./components/Layout/Menu.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Menu, Image, Icon, Grid, Modal, Header } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux';\r\nimport web3 from '../../ethereum/web3';\r\nimport Blockies from 'react-blockies';\r\nimport EthLounge from '../../ethereum/EthLounge';\r\nimport store from '../../redux/store';\r\nimport { Sleep } from '../../helpers/Sleep';\r\nimport ShortEthAddress from '../../helpers/ShortEthAddress';\r\nimport { addToken } from '../../redux/actions';\r\n\r\nclass Token {\r\n    constructor(address, amount, position) {\r\n        this.address = address;\r\n        this.amount = amount;\r\n        this.initialAmount = amount;\r\n        this.position = position;\r\n    }\r\n}\r\n\r\nclass MenuExampleSizeLarge extends Component {\r\n\r\n   constructor(props) {\r\n        super(props);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.state = {loading: false, account: '', signedIn: false, popupOpen: false, readyToGenerateRightMenu: false}; \r\n   }\r\n\r\n   async componentDidMount() {\r\n        // Restore session from local storage\r\n        const account = window.localStorage.getItem('eth-account', account);\r\n        const openSessionAccounts = await web3.eth.getAccounts();\r\n        \r\n        if (account && openSessionAccounts.length > 0) {\r\n            store.dispatch({ type: 'LOG_IN', account: account });\r\n            this.setState({signedIn: true, account: account})\r\n            this.getTokens(account);\r\n        }\r\n        else\r\n        store.dispatch({ type: 'LOG_OUT' }); \r\n        \r\n        this.setState({readyToGenerateRightMenu: true})\r\n   }\r\n\r\n    generateRightMenu(signedIn, readyToGenerateRightMenu) {\r\n        if(readyToGenerateRightMenu) {\r\n            if (signedIn) {\r\n            const ethAddressShort = ShortEthAddress(this.state.account);           \r\n\r\n            const ethAddressStyle = {color: 'white'};\r\n\r\n            return (\r\n                <Grid>\r\n                    <Grid.Row verticalAlign='middle'>\r\n                        <Grid.Column width={4}>\r\n                            <div className='user-avatar'><Blockies seed={this.state.account} scale={6} size={14}/></div>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={1}>\r\n\r\n                        </Grid.Column>\r\n                        <Grid.Column width={10} className='user-column-right'>\r\n                            <div className='user-column-right-address'><a style={ethAddressStyle} href={`https://etherscan.io/address/${this.state.account}`} target='_blank'>{ethAddressShort}</a></div>\r\n                            <Button onClick={e => this.handleLogout(e)} loading={this.state.loading} size='mini' color='black' icon labelPosition='right' className='user-column-right-signout-button'>\r\n                                Log out\r\n                                <Icon name='power off' />\r\n                            </Button>\r\n                        </Grid.Column>\r\n\r\n                    </Grid.Row>\r\n                </Grid>); \r\n       } \r\n        return (<Button loading={this.state.loading} onClick={e => this.handleLogin(e)} color='black'>Sign in</Button>);       \r\n        }\r\n       \r\n      return <Button loading={true} className=\"dark-orange-bg\" />;\r\n   }\r\n\r\n  async handleLogin(e) {  \r\n    this.setState({loading: true});\r\n    await Sleep(300);\r\n\r\n    let account;\r\n\r\n    [ account ] = await web3.eth.getAccounts();\r\n\r\n    if (typeof account !== 'undefined') {\r\n        this.setState({account: account});\r\n        this.getTokens(account);\r\n        this.setState({signedIn: true});\r\n        store.dispatch({ type: 'LOG_IN', account: account });\r\n        window.localStorage.setItem('eth-account', account);\r\n    } else {\r\n        this.setState({popupOpen: true});\r\n    }\r\n\r\n    this.setState({loading: false});\r\n  }\r\n\r\n  async handleLogout(e) {\r\n    this.setState({loading: true});\r\n    await Sleep(600);\r\n    this.setState({signedIn: false});\r\n    store.dispatch({ type: 'LOG_OUT' });\r\n    this.setState({loading: false});\r\n    window.localStorage.removeItem('eth-account');\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Menu inverted size='large' className='menu'>\r\n        <Menu.Item>\r\n            <Image src='/static/img/logo.png' />\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n            <Icon name='chess knight' />       \r\n             My Bets\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n            <Icon name='angle double down' />   \r\n            Deposit\r\n        </Menu.Item>\r\n\r\n        <Menu.Item>\r\n            <Icon name='angle double up' />   \r\n            Withdraw\r\n        </Menu.Item>\r\n\r\n        <Menu.Item>\r\n            <Icon name='question circle outline' />   \r\n            FAQ\r\n        </Menu.Item>\r\n        <Menu.Item position='right'>\r\n            {this.generateRightMenu(this.state.signedIn, this.state.readyToGenerateRightMenu)}     \r\n        </Menu.Item>\r\n\r\n        <Modal open={this.state.popupOpen} size='small'>\r\n                <Modal.Header>You need Metamask to sign in</Modal.Header>\r\n                <Modal.Content image>\r\n                    <Image wrapped size='medium' src='/static/img/metamask.png' />\r\n                    <Modal.Description>\r\n                        <Header>What is Metamask?</Header>\r\n                        <p>MetaMask is an extension for accessing Ethereum Dapps. You can download it <a href='https://metamask.io/' target='_blank'>here</a>.</p>                        <Header>But I have Metamask...</Header>\r\n                        <p>If you have Metamask installed, please make sure to unlock your account.</p>                        \r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button className=\"dark-orange-bg font-white\" onClick={(e) => {this.setState({popupOpen: false})}}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n        </Modal>        \r\n      </Menu>\r\n      \r\n\r\n    );\r\n  }\r\n\r\n\r\n  async getTokens(account) {\r\n    const result = await EthLounge.methods.getBalances().call({from: account});\r\n    const tokenAddresses = result[0];\r\n    const tokenAmounts = result[1];\r\n\r\n    for (let i = 0; i < tokenAmounts.length; i++) {\r\n        if (tokenAmounts[i] !== '0') {\r\n            const newToken = new Token(tokenAddresses[i], tokenAmounts[i], 'balance-box');\r\n            store.dispatch(addToken(newToken));\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default MenuExampleSizeLarge;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAIA;AACA;;;;;;;;;;;;AAEA;AACA;;AACA;AACA;;AADA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;;;;;;;AACA;AAAA;AAAA;;AACA;AACA;;;AAGA;AACA;;;;AADA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;AAAA;AAAA;;AACA;AACA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAIA;AAAA;AAKA;AAAA;AAKA;AAAA;AAGA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;;;AAGA;;;;;;;AACA;AAAA;AAAA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAvJA;AACA;AA4JA;;;;A","sourceRoot":""}