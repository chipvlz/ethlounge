{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.ecdabf4db5d6bc876201.hot-update.js","sources":["webpack:///./components/match/LastBets.js","webpack:///./components/match/MatchDetails.js","webpack:///./redux/match/matchReducer.js","webpack:///./utils/EstimateBetValue.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Reveal } from 'semantic-ui-react';\r\nimport makeBlockie from 'ethereum-blockies-base64';\r\nimport Token from './Token';\r\nimport { backend } from '../../config/config';\r\n\r\nclass LastBets extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  renderTokens(tokens, bet) {\r\n    const markup = tokens.map(token => {\r\n      return (\r\n        <Grid.Column\r\n          key={bet.betMakerID + token.id}\r\n          className=\"last-bets-token-column\"\r\n          width={4}>\r\n          {<Token token={token} />}\r\n        </Grid.Column>\r\n      );\r\n    });\r\n\r\n    return markup;\r\n  }\r\n\r\n  renderLastBets(bets) {\r\n    const markup = bets.map(bet => {\r\n      let { betMakerID, betMakerUsername, tokensBet, team } = bet;\r\n\r\n      return (\r\n        <Grid.Row key={betMakerID} className=\"last-bets-row\">\r\n          <Grid.Column width={3} verticalAlign=\"middle\">\r\n            <Reveal animated=\"rotate\">\r\n              <Reveal.Content visible>\r\n                <img\r\n                  src={makeBlockie(betMakerUsername)}\r\n                  className=\"user-avatar undragable\"\r\n                />\r\n              </Reveal.Content>\r\n              <Reveal.Content hidden>\r\n                <img\r\n                  src={`${backend}/img/${team.logo}`}\r\n                  className=\"user-avatar undragable img-team-reveal\"\r\n                />\r\n              </Reveal.Content>\r\n            </Reveal>\r\n          </Grid.Column>\r\n          <Grid.Column width={13} verticalAlign=\"middle\">\r\n            <Grid>\r\n              <Grid.Row>{this.renderTokens(tokensBet, bet)}</Grid.Row>\r\n            </Grid>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      );\r\n    });\r\n\r\n    return markup;\r\n  }\r\n\r\n  render() {\r\n    const { bets } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Grid padded>{this.renderLastBets(bets)}</Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LastBets;\r\n","import React, { Component } from 'react';\r\nimport { Grid, Icon, Label, List, Header } from 'semantic-ui-react';\r\nimport { backend } from '../../config/config';\r\nimport DateFormatter from '../../utils/DateFormatter';\r\nimport { ICON } from '../../utils/constants';\r\n\r\nclass MatchDetails extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    let { match } = this.props;\r\n    const {\r\n      teams,\r\n      league,\r\n      numberOfBets,\r\n      highestBet,\r\n      tokensInPool,\r\n      serie,\r\n      startTime,\r\n      state\r\n    } = match;\r\n\r\n    if (!serie) serie = '';\r\n    if (!league) league = { displayName: '' };\r\n\r\n    const date = DateFormatter(startTime);\r\n\r\n    let aproxIcon;\r\n    if (date.isFuture) {\r\n      aproxIcon = ICON.GAME_SCHEDULED;\r\n    } else {\r\n      if (state === 'finalized' || state === 'canceled') {\r\n        aproxIcon = ICON.GAME_FINISHED;\r\n      } else {\r\n        aproxIcon = ICON.GAME_STARTED;\r\n      }\r\n    }\r\n\r\n    if (match)\r\n      return (\r\n        <div style={{ marginTop: '0.5em' }}>\r\n          <Grid>\r\n            <Grid.Row columns=\"1\">\r\n              <Grid.Column textAlign=\"right\">\r\n                <Label className=\"orange-label-light\" size=\"large\">\r\n                  <Icon name={ICON.DATE} />\r\n                  {date.formatedDate}\r\n                </Label>\r\n                <Label className=\"orange-label-light\" size=\"large\">\r\n                  <Icon name={aproxIcon} />\r\n                  {date.aprox}\r\n                </Label>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row columns=\"2\">\r\n              <Grid.Column>\r\n                <Header dividing as=\"h4\">\r\n                  Match statistics\r\n                </Header>\r\n                <List className=\"details-list\">\r\n                  <List.Item>\r\n                    <List.Icon name=\"dollar sign\" className=\"font-dark\" />\r\n                    <List.Content>\r\n                      <List.Header>{`${(\r\n                        teams[0].totalDollarsBet + teams[1].totalDollarsBet\r\n                      ).toFixed(2)}$`}</List.Header>\r\n                      <List.Description>Total bet</List.Description>\r\n                    </List.Content>\r\n                  </List.Item>\r\n                  <List.Item>\r\n                    <List.Icon name=\"ticket alternate\" className=\"font-dark\" />\r\n                    <List.Content>\r\n                      <List.Header>{numberOfBets}</List.Header>\r\n                      <List.Description>Bets total</List.Description>\r\n                    </List.Content>\r\n                  </List.Item>\r\n                  <List.Item>\r\n                    <List.Icon name=\"chess king\" className=\"font-dark\" />\r\n                    <List.Content>\r\n                      <List.Header>{`${highestBet.toFixed(2)}$`}</List.Header>\r\n                      <List.Description>Highest bet</List.Description>\r\n                    </List.Content>\r\n                  </List.Item>\r\n                  <List.Item>\r\n                    <List.Icon name=\"ethereum\" className=\"font-dark\" />\r\n                    <List.Content>\r\n                      <List.Header>{tokensInPool.length}</List.Header>\r\n                      <List.Description>\r\n                        Different tokens in pool\r\n                      </List.Description>\r\n                    </List.Content>\r\n                  </List.Item>\r\n                </List>\r\n              </Grid.Column>\r\n              <Grid.Column verticalAlign=\"middle\" textAlign=\"center\">\r\n                <img\r\n                  className=\"league-image undragable\"\r\n                  src={`${backend}/img/${league.logo}`}\r\n                />\r\n                <p className=\"league-caption\">{`${\r\n                  league.displayName\r\n                } ${serie}`}</p>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </div>\r\n      );\r\n\r\n    return '';\r\n  }\r\n}\r\n\r\nexport default MatchDetails;\r\n","import _ from 'lodash';\r\nimport EstimateBetValue from '../../utils/EstimateBetValue';\r\n\r\nconst initialState = {\r\n  tokens: { toBet: [], wallet: [] },\r\n  prices: {},\r\n  betValue: 0,\r\n  pickedTeam: {},\r\n  errorModal: { isOpen: false, head: '', reasons: [] },\r\n  confirmBetModal: { isOpen: false }\r\n};\r\n\r\nconst matchReducer = (state = initialState, action) => {\r\n  let newState = _.cloneDeep(state);\r\n\r\n  switch (action.type) {\r\n    case 'ADD_TOKENS': {\r\n      const tokens = action.tokens.map(token => {\r\n        return {\r\n          ...token,\r\n          position: 'balance-box',\r\n          initialBalance: token.balance\r\n        };\r\n      });\r\n\r\n      newState.tokens.wallet = tokens;\r\n      break;\r\n    }\r\n\r\n    case 'CHANGE_POS': {\r\n      if (action.token.position === 'balance-box') {\r\n        action.token.position = 'betting-box';\r\n        newState.tokens.toBet.push(action.token);\r\n        newState.tokens.wallet = newState.tokens.wallet.filter(\r\n          curr => curr.symbol != action.token.symbol\r\n        );\r\n      } else {\r\n        action.token.position = 'balance-box';\r\n        action.token.balance = action.token.initialBalance;\r\n        newState.tokens.wallet.push(action.token);\r\n        newState.tokens.toBet = newState.tokens.toBet.filter(\r\n          curr => curr.symbol != action.token.symbol\r\n        );\r\n      }\r\n\r\n      newState.betValue = EstimateBetValue(\r\n        newState.tokens.toBet,\r\n        newState.prices,\r\n        false\r\n      );\r\n\r\n      break;\r\n    }\r\n\r\n    case 'UPDATE_PRICES': {\r\n      newState.prices = action.prices;\r\n      break;\r\n    }\r\n\r\n    case 'UPDATE_ESTIMATE_BET': {\r\n      newState.betValue = action.sum;\r\n      break;\r\n    }\r\n\r\n    case 'PICK_TEAM': {\r\n      newState.pickedTeam = action.team;\r\n      break;\r\n    }\r\n\r\n    case 'TOGGLE_MODAL': {\r\n      newState[action.property].isOpen = !newState[action.property].isOpen;\r\n      break;\r\n    }\r\n\r\n    case 'TOGGLE_ERROR_MODAL': {\r\n      newState.errorModal.isOpen = !state.errorModal.isOpen;\r\n      newState.errorModal.head = action.head;\r\n      newState.errorModal.reasons = action.reasons;\r\n      break;\r\n    }\r\n\r\n    case 'LOG_OUT': {\r\n      newState = { ...initialState };\r\n      newState.prices = state.prices;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\nexport default matchReducer;\r\n","import Big from 'big.js';\r\nimport TokenFromWei from './TokenFromWei';\r\nimport store from '../redux/store';\r\nimport { updateEstimateBet } from '../redux/match/actions';\r\n\r\nconst EstimateBetValue = (tokensToBet, prices, dispatch = true) => {\r\n  const symbols = tokensToBet.map(curr => {\r\n    return curr.symbol;\r\n  });\r\n\r\n  const values = symbols.map(curr => {\r\n    return prices[curr].USD;\r\n  });\r\n\r\n  let sum = values.reduce((sum, curr, index) => {\r\n    return (\r\n      sum +\r\n      parseFloat(\r\n        Big(TokenFromWei(tokensToBet[index]))\r\n          .mul(curr)\r\n          .toFixed(2)\r\n      )\r\n    );\r\n  }, 0);\r\n\r\n  if (sum === '00.00') sum = '0';\r\n\r\n  if (dispatch) store.dispatch(updateEstimateBet(sum));\r\n\r\n  return sum;\r\n};\r\n\r\nexport default EstimateBetValue;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAIA;AAAA;AAGA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAEA;AACA;AAFA;AAOA;AAAA;AAAA;AAOA;AAEA;AACA;;;AAEA;AAAA;AAGA;AAEA;AAAA;AAGA;;;;AA9DA;AACA;AAgEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AASA;AAAA;AAAA;AAOA;AAAA;AAAA;AAOA;AAAA;AAAA;AAUA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AASA;AACA;;;;AAzGA;AACA;AA2GA;;;;;;;;;;;;;;;;;;;;AClHA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAtEA;AACA;AAwEA;AACA;AACA;AACA;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;;A","sourceRoot":""}