{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.d8b502f653a0e691d429.hot-update.js","sources":["webpack:///./components/Layout/Menu.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  Menu,\r\n  Image,\r\n  Icon,\r\n  Grid,\r\n  Modal,\r\n  GridColumn,\r\n  Message,\r\n  Form,\r\n  Header,\r\n  GridRow\r\n} from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../redux/store';\r\nimport ShortEthAddress from '../../utils/ShortEthAddress';\r\nimport makeBlockie from 'ethereum-blockies-base64';\r\nimport axios from 'axios';\r\nimport { Router } from '../../next-routes';\r\nimport MenuUser from './MenuUser';\r\n\r\nclass MenuExampleSizeLarge extends Component {\r\n  constructor(props) {\r\n    console.log('state in constructor of menu', store.getState());\r\n    super(props);\r\n    this.handleSignUp = this.handleSignUp.bind(this);\r\n    this.handleSingOut = this.handleSignOut.bind(this);\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      password_2: '',\r\n      signUpErrors: [],\r\n      signUpOpen: false,\r\n      signInOpen: false,\r\n      avatarClassNameModifier: ''\r\n    };\r\n  }\r\n\r\n  renderRightMenu(user) {\r\n    switch (user) {\r\n      case false: {\r\n        return (\r\n          <div>\r\n            <Button\r\n              onClick={e => this.setState({ signInOpen: true })}\r\n              color=\"black\">\r\n              Sign in\r\n            </Button>\r\n            <span className=\"or\">or</span>\r\n            <Button\r\n              onClick={e => this.setState({ signUpOpen: true })}\r\n              color=\"black\"\r\n              className=\"margin-right-1em\">\r\n              Sign up\r\n            </Button>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      case null: {\r\n        return '';\r\n      }\r\n\r\n      default: {\r\n        <MenuUser\r\n          user={user}\r\n          avatarClassNameModifier={this.state.avatarClassNameModifier}\r\n        />;\r\n        const { username } = user;\r\n        const usernameStyle = { color: 'white' };\r\n        return (\r\n          <Grid className=\"menu-right\">\r\n            <Grid.Row verticalAlign=\"middle\">\r\n              <Grid.Column width={4}>\r\n                <div>\r\n                  <img\r\n                    src={makeBlockie(username)}\r\n                    className={`user-avatar undragable ${\r\n                      this.state.avatarClassNameModifier\r\n                    }`}\r\n                  />\r\n                </div>\r\n              </Grid.Column>\r\n              <Grid.Column width={1} />\r\n              <Grid.Column width={10} className=\"user-column-right\">\r\n                <Grid>\r\n                  <GridRow style={{ padding: '0' }}>\r\n                    <div>\r\n                      <Header size=\"tiny\" style={usernameStyle}>\r\n                        {username}\r\n                      </Header>\r\n                    </div>\r\n                  </GridRow>\r\n                  <GridRow style={{ padding: '0' }}>\r\n                    <GridColumn width=\"3\" style={{ padding: '0' }}>\r\n                      <Button\r\n                        size=\"small\"\r\n                        onClick={e => this.handleSignOut()}\r\n                        icon=\"power off\"\r\n                        className=\"user-column-right-button orange-button-dark\"\r\n                      />\r\n                    </GridColumn>\r\n                    <GridColumn width=\"1\" style={{ padding: '0.5em' }} />\r\n                    <GridColumn style={{ padding: '0' }} width=\"3\">\r\n                      <Button\r\n                        size=\"small\"\r\n                        icon=\"setting\"\r\n                        className=\"user-column-right-button orange-button-dark\"\r\n                      />\r\n                    </GridColumn>\r\n                  </GridRow>\r\n                </Grid>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  async handleSignUp() {\r\n    // Client side check\r\n    const { username, password, password_2 } = this.state;\r\n    const signUpErrors = [];\r\n\r\n    if (username.length < 5) {\r\n      signUpErrors.push('Username should be at least 4 characters long.');\r\n    } else if (username.length > 20) {\r\n      signUpErrors.push('Username should be maximum 20 characters long.');\r\n    }\r\n\r\n    if (password.length >= 8) {\r\n      if (password !== password_2) {\r\n        signUpErrors.push('Passwords do not seem to match.');\r\n      }\r\n    } else {\r\n      c;\r\n    }\r\n\r\n    if (signUpErrors.length > 0) {\r\n      this.setState({ signUpErrors });\r\n      return;\r\n    }\r\n\r\n    const response = await axios({\r\n      method: 'post',\r\n      url: '/register',\r\n      data: { username, password },\r\n      config: { headers: { 'Content-Type': 'multipart/form-data' } }\r\n    });\r\n\r\n    console.log(response.data);\r\n\r\n    if (response.data.success) {\r\n    } else {\r\n      this.setState({\r\n        signUpErrors: [\r\n          'This username already exist. Try to pick something else.'\r\n        ]\r\n      });\r\n    }\r\n  }\r\n\r\n  async handleSignOut() {\r\n    console.log('sign out');\r\n    this.setState({ avatarClassNameModifier: 'avatar-exit' });\r\n    await axios.get('/logout');\r\n    Router.push('/');\r\n  }\r\n\r\n  isButtonDisabled(text) {\r\n    const ok = text.every(curr => curr.length > 0);\r\n\r\n    return !ok;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Menu inverted size=\"large\" className=\"top-menu\">\r\n        <Menu.Item>\r\n          <Image src=\"/static/img/logo.png\" />\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Icon name=\"chess knight\" />\r\n          My Bets\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Icon name=\"angle double down\" />\r\n          Deposit\r\n        </Menu.Item>\r\n\r\n        <Menu.Item>\r\n          <Icon name=\"angle double up\" />\r\n          Withdraw\r\n        </Menu.Item>\r\n\r\n        <Menu.Item>\r\n          <Icon name=\"question circle outline\" />\r\n          FAQ\r\n        </Menu.Item>\r\n        <Menu.Item position=\"right\">\r\n          {this.renderRightMenu(this.props.user)}\r\n        </Menu.Item>\r\n\r\n        <Modal open={this.state.signUpOpen} size=\"small\">\r\n          <Modal.Header>Sign up as a new user</Modal.Header>\r\n          <Modal.Content>\r\n            <Form>\r\n              <Form.Field>\r\n                <label>Username</label>\r\n                <input\r\n                  onChange={e => this.setState({ username: e.target.value })}\r\n                  value={this.state.username}\r\n                />\r\n              </Form.Field>\r\n\r\n              <Form.Field>\r\n                <label>Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  onChange={e => this.setState({ password: e.target.value })}\r\n                  value={this.state.password}\r\n                />\r\n              </Form.Field>\r\n\r\n              <Form.Field>\r\n                <label>Repeat password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  onChange={e => this.setState({ password_2: e.target.value })}\r\n                  value={this.state.password_2}\r\n                />\r\n              </Form.Field>\r\n            </Form>\r\n            {this.renderSingUpErrors(this.state.signUpErrors)}\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button\r\n              className=\"dark-orange-bg font-white\"\r\n              onClick={e => {\r\n                this.setState({\r\n                  signUpOpen: false,\r\n                  username: '',\r\n                  password: '',\r\n                  password_2: ''\r\n                });\r\n              }}>\r\n              Back\r\n            </Button>\r\n\r\n            <Button\r\n              className=\"dark-button\"\r\n              onClick={e => this.handleSignUp()}\r\n              disabled={this.isButtonDisabled([\r\n                this.state.username,\r\n                this.state.password,\r\n                this.state.password_2\r\n              ])}>\r\n              Sign Up\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n\r\n        <Modal open={this.state.signInOpen} size=\"small\">\r\n          <Modal.Header>Sign in</Modal.Header>\r\n          <Modal.Content>\r\n            <Form id=\"login_form\" action=\"/login\" method=\"post\">\r\n              <Form.Field>\r\n                <label>Username</label>\r\n                <input\r\n                  name=\"username\"\r\n                  onChange={e => this.setState({ username: e.target.value })}\r\n                  value={this.state.username}\r\n                />\r\n              </Form.Field>\r\n\r\n              <Form.Field>\r\n                <label>Password</label>\r\n                <input\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  onChange={e => this.setState({ password: e.target.value })}\r\n                  value={this.state.password}\r\n                />\r\n              </Form.Field>\r\n            </Form>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button\r\n              className=\"dark-orange-bg font-white\"\r\n              onClick={e => {\r\n                this.setState({\r\n                  signInOpen: false,\r\n                  username: '',\r\n                  password: ''\r\n                });\r\n              }}>\r\n              Back\r\n            </Button>\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              form=\"login_form\"\r\n              className=\"dark-button\"\r\n              disabled={this.isButtonDisabled([\r\n                this.state.username,\r\n                this.state.password\r\n              ])}>\r\n              Sign In\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </Menu>\r\n    );\r\n  }\r\n\r\n  renderSingUpErrors(errors) {\r\n    if (errors[0]) {\r\n      return (\r\n        <Message\r\n          error\r\n          header=\"There were some errors in your sign up form.\"\r\n          list={errors}\r\n        />\r\n      );\r\n    }\r\n    return '';\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.login.user\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MenuExampleSizeLarge);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AALA;AAcA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAFA;AAQA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAYA;AA7EA;AA+EA;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AAAA;;;;;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;;AADA;AAOA;AACA;AACA;AAEA;AACA;AADA;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;;AACA;AACA;;AAAA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AAAA;AAAA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAIA;AAAA;AAKA;AAAA;AAKA;AAAA;AAGA;AAAA;AAIA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AATA;AAcA;AACA;AAAA;AAAA;AACA;AAHA;AAaA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AARA;AAaA;AACA;AACA;AACA;AAJA;AAcA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;;;;AAlTA;AACA;AAoTA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;A","sourceRoot":""}