{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.dc58fafec2aa55c585b1.hot-update.js","sources":["webpack:///./components/Layout/Menu.js","webpack:///./components/RangeSlider.js","webpack:///./components/Token.js","webpack:///./components/match/BettingBox.js","webpack:///./components/match/BettingBoxItem.js","webpack:///./components/match/TokenBox.js","webpack:///./components/match/TokenBoxItem.js","webpack:///./helpers/EstimateBetValue.js","webpack:///./helpers/TokenFromWei.js","webpack:///./pages/matches/match.js","webpack:///./redux/actions.js","webpack:///./redux/reducers.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Menu, Image, Icon, Grid, Modal, Header } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux';\r\nimport web3 from '../../ethereum/web3';\r\nimport Blockies from 'react-blockies';\r\nimport EthLounge from '../../ethereum/EthLounge';\r\nimport store from '../../redux/store';\r\nimport { Sleep } from '../../helpers/Sleep';\r\nimport ShortEthAddress from '../../helpers/ShortEthAddress';\r\n\r\nclass Item {\r\n    constructor(token, amount, position) {\r\n        this.address = token;\r\n        this.amount = amount;\r\n        this.initialAmount = amount;\r\n        this.position = position;\r\n    }\r\n}\r\n\r\nclass MenuExampleSizeLarge extends Component {\r\n\r\n   constructor(props) {\r\n        super(props);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.state = {loading: false, account: '', signedIn: false, items: {}, popupOpen: false, readyToGenerateRightMenu: false}; \r\n   }\r\n\r\n   async componentDidMount() {\r\n        // Restore session from local storage\r\n        const account = window.localStorage.getItem('eth-account', account);\r\n        const openSessionAccounts = await web3.eth.getAccounts();\r\n        \r\n        if (account && openSessionAccounts.length > 0) {\r\n            store.dispatch({ type: 'LOG_IN', account: account });\r\n            this.setState({signedIn: true, account: account})\r\n            this.getItems(account);\r\n        }\r\n        else\r\n        store.dispatch({ type: 'LOG_OUT' }); \r\n        \r\n        this.setState({readyToGenerateRightMenu: true})\r\n   }\r\n\r\n    generateRightMenu(signedIn, readyToGenerateRightMenu) {\r\n        if(readyToGenerateRightMenu) {\r\n            if (signedIn) {\r\n            const ethAddressShort = ShortEthAddress(this.state.account);           \r\n\r\n            const ethAddressStyle = {color: 'white'};\r\n\r\n            return (\r\n                <Grid>\r\n                    <Grid.Row verticalAlign='middle'>\r\n                        <Grid.Column width={4}>\r\n                            <div className='user-avatar'><Blockies seed={this.state.account} scale={6} size={14}/></div>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={1}>\r\n\r\n                        </Grid.Column>\r\n                        <Grid.Column width={10} className='user-column-right'>\r\n                            <div className='user-column-right-address'><a style={ethAddressStyle} href={`https://etherscan.io/address/${this.state.account}`} target='_blank'>{ethAddressShort}</a></div>\r\n                            <Button onClick={e => this.handleLogout(e)} loading={this.state.loading} size='mini' color='black' icon labelPosition='right' className='user-column-right-signout-button'>\r\n                                Log out\r\n                                <Icon name='power off' />\r\n                            </Button>\r\n                        </Grid.Column>\r\n\r\n                    </Grid.Row>\r\n                </Grid>); \r\n       } \r\n        return (<Button className='menu-right-item-button' loading={this.state.loading} onClick={e => this.handleLogin(e)} color='black'>Sign in</Button>);       \r\n        }\r\n       \r\n      return <Button loading={true} className=\"dark-orange-bg\" />;\r\n   }\r\n\r\n  async handleLogin(e) {  \r\n    this.setState({loading: true});\r\n    await Sleep(300);\r\n\r\n    let account;\r\n\r\n    [ account ] = await web3.eth.getAccounts();\r\n\r\n    if (typeof account !== 'undefined') {\r\n        this.setState({account: account});\r\n        this.getItems(account);\r\n        this.setState({signedIn: true});\r\n        store.dispatch({ type: 'LOG_IN', account: account });\r\n        window.localStorage.setItem('eth-account', account);\r\n    } else {\r\n        this.setState({popupOpen: true});\r\n    }\r\n\r\n    this.setState({loading: false});\r\n  }\r\n\r\n  async handleLogout(e) {\r\n    this.setState({loading: true});\r\n    await Sleep(600);\r\n    this.setState({signedIn: false});\r\n    store.dispatch({ type: 'LOG_OUT' });\r\n    this.setState({loading: false});\r\n    window.localStorage.removeItem('eth-account');\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Menu inverted size='large' className='menu'>\r\n        <Menu.Item>\r\n            <Image src='/static/img/logo.png' />\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n            <Icon name='chess knight' />       \r\n             My Bets\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n            <Icon name='angle double down' />   \r\n            Deposit\r\n        </Menu.Item>\r\n\r\n        <Menu.Item>\r\n            <Icon name='angle double up' />   \r\n            Withdraw\r\n        </Menu.Item>\r\n\r\n        <Menu.Item>\r\n            <Icon name='question circle outline' />   \r\n            FAQ\r\n        </Menu.Item>\r\n        <Menu.Item position='right' className='menu-right-item'>\r\n            {this.generateRightMenu(this.state.signedIn, this.state.readyToGenerateRightMenu)}     \r\n        </Menu.Item>\r\n\r\n        <Modal open={this.state.popupOpen} size='small'>\r\n                <Modal.Header>You need Metamask to sign in</Modal.Header>\r\n                <Modal.Content image>\r\n                    <Image wrapped size='medium' src='/static/img/metamask.png' />\r\n                    <Modal.Description>\r\n                        <Header>What is Metamask?</Header>\r\n                        <p>MetaMask is an extension for accessing Ethereum Dapps. You can download it <a href='https://metamask.io/' target='_blank'>here</a>.</p>                        <Header>But I have Metamask...</Header>\r\n                        <p>If you have Metamask installed, please make sure to unlock your account.</p>                        \r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button className=\"dark-orange-bg font-white\" onClick={(e) => {this.setState({popupOpen: false})}}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Actions>\r\n        </Modal>        \r\n      </Menu>\r\n      \r\n\r\n    );\r\n  }\r\n\r\n\r\n  async getItems(account) {\r\n    const result = await EthLounge.methods.getBalances().call({from: account});\r\n    const tokens = result[0];\r\n    const amounts = result[1];\r\n\r\n    for (let i = 0; i < amounts.length; i++) {\r\n        if (amounts[i] !== '0') {\r\n            const newItem = new Item(tokens[i], amounts[i], 'token-box');\r\n            store.dispatch({ type: 'ADD_ITEM', item: newItem });\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect()(MenuExampleSizeLarge);","import React, { Component } from 'react';\r\nimport Slider from 'react-rangeslider';\r\nimport Big from 'big.js';\r\nimport EstimateBetValue from '../helpers/EstimateBetValue';\r\n\r\nclass RangeSlider extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);            \r\n        this.handleRange = this.handleRange.bind(this);\r\n\r\n        this.state = {value: 1000}\r\n    }\r\n\r\n    handleRange = (val) => {\r\n        this.setState({value: val})\r\n        const change = val/1000;\r\n        const newAmount = `${Big(this.props.token.initialAmount).mul(change).toFixed(0)}`;\r\n        this.props.token.amount = newAmount;\r\n        this.props.handleRange(this.props.token);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Slider min={1} max={1000} step={10} tooltip={false} value={this.state.value} onChange={(val) => this.handleRange(val)}  onChangeComplete={(event) => {EstimateBetValue(this.props.toBet, this.props.prices)}}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RangeSlider;","import React from 'react';\r\nimport { DictionarrySymbol } from '../helpers/SupportedTokens';\r\nimport { Label, Image } from 'semantic-ui-react';\r\nimport TokenFromWei from '../helpers/TokenFromWei';\r\n\r\nexport default (props) => {\r\n    return (\r\n        <Label as='a' key={props.item.token} className=\"token-label\">\r\n            <Image avatar spaced='right' src={`/static/img/tokens/${DictionarrySymbol.get(props.item.token)}.png`} />\r\n            {TokenFromWei(props.item, 'symbol', true)}\r\n        </Label>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport BettingBoxItem from './BettingBoxItem';\r\nimport RangeSlider from '../RangeSlider'\r\n\r\nclass BettingBox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    renderItems(tokens) {    \r\n        let bettingBoxes = [];\r\n        const numberOfBoxes = 4;\r\n        \r\n\r\n        for (let i = 0; i < numberOfBoxes; i++) {\r\n            let pos = `betting-box-${i}`;       \r\n            let tokenProp;\r\n            let rangeSlider = '';\r\n\r\n            for (let token of tokens) {\r\n                if (token.position === pos) {\r\n                    tokenProp = token;\r\n                    rangeSlider = <RangeSlider prices={this.props.prices} token={token} toBet={tokens} handleRange={this.props.handleRange}></RangeSlider>\r\n                }\r\n            }\r\n            \r\n            bettingBoxes.push(\r\n                    <Grid.Row key={pos}>\r\n                        <Grid.Column width={7}>\r\n                            <BettingBoxItem pos={pos} droppedItem={tokenProp} handleDelete={this.props.handleDelete}/>                           \r\n                        </Grid.Column>\r\n                        <Grid.Column width={9} verticalAlign=\"middle\">\r\n                            {rangeSlider}\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n            );\r\n        }\r\n\r\n        return bettingBoxes;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"betting-box\">\r\n                <Grid columns='equal'>\r\n                    {this.renderItems(this.props.tokens)}\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BettingBox;","import React, { Component } from 'react';\r\nimport { Segment, Icon } from 'semantic-ui-react';\r\nimport { DropTarget } from 'react-dnd';\r\nimport Token from '../Token';\r\n\r\nconst itemSource = {\r\n    drop(props) {\r\n        return {pos: props.pos};\r\n    },\r\n}\r\n\r\n\r\nfunction collect(connect, monitor) {\r\n    return {\r\n        connectDropTarget: connect.dropTarget(),\r\n        isOver: monitor.isOver(),\r\n        token: monitor.getToken(),\r\n        canDrop: monitor.canDrop()\r\n    }\r\n}\r\n\r\nclass BettingBoxToken extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(e) {\r\n        this.props.handleDelete(this.props.droppedToken);\r\n    }\r\n\r\n    render() {\r\n        const { canDrop, connectDropTarget, isOver, token, pos } = this.props;\r\n        \r\n        let classNameModifier = '';\r\n\r\n        if (isOver && canDrop) {\r\n            classNameModifier += ' betting-box-token-hovered';\r\n        }\r\n\r\n        if (!isOver && canDrop) {\r\n            classNameModifier += ' betting-box-token-candrop';\r\n        }\r\n\r\n        let Token;\r\n\r\n        if (this.props.droppedToken) {\r\n            Token = <Token token={this.props.droppedToken} className=\"token-dropped\"></Token>\r\n\r\n            classNameModifier = ' betting-box-token-dropped'\r\n\r\n            return (            \r\n                <div>\r\n                    <Segment onClick={this.handleClick} textAlign='center' className={'betting-box-token' + classNameModifier}>\r\n                    {Token}\r\n                    </Segment>\r\n                </div>\r\n            );\r\n        } \r\n            \r\n\r\n            return connectDropTarget(            \r\n                <div>\r\n                    <Segment size={\"big\"} textAlign='center' className={'betting-box-token' + classNameModifier}>\r\n                    </Segment>\r\n                </div>\r\n            );\r\n        \r\n    }\r\n}\r\n\r\nexport default DropTarget('token', itemSource, collect)(BettingBoxToken);","import React, { Component } from 'react';\r\nimport TokenBoxItem from './TokenBoxItem';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\n\r\nclass TokenBox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);    \r\n        \r\n        this.handleDrop = this.handleDrop.bind(this);\r\n    }\r\n\r\n    handleDrop(token, pos) {\r\n        this.props.handleDrop(token, pos);\r\n    }\r\n\r\n    renderItems = (tokens) => {\r\n            const toRender = <div>{tokens.map(token => {\r\n                if(token.position == 'token-box') {\r\n                return (\r\n                <TokenBoxItem key={token.address} token={{token: token.address, amount: token.amount, initialAmount: token.initialAmount, position: token.position}} handleDrop={(token, pos) => this.handleDrop(token, pos)}></TokenBoxItem>);\r\n                } else {return ''};            \r\n            })}</div>;\r\n            \r\n            return toRender;\r\n        \r\n      }\r\n\r\n    render() {\r\n        if (this.props.signedIn)\r\n        return (\r\n            <div className='tokens-box'>            \r\n                {this.renderItems(this.props.tokens)}   \r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <Message\r\n            warning\r\n            header='Sign in with Metamask'\r\n            content='Please sign in with Metamask in order to see your balances and place bets.'\r\n          />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default TokenBox;","import React, { Component } from 'react';\r\nimport Item from '../Token';\r\nimport { DragSource } from 'react-dnd';\r\n\r\nconst itemSource = {\r\n    beginDrag(props) {\r\n        return props.token;\r\n    },\r\n    endDrag(props, monitor) {\r\n        if(!monitor.didDrop()) return;\r\n        return props.handleDrop(props.token, monitor.getDropResult().pos);\r\n        \r\n    }\r\n}\r\n\r\nfunction collect(connect, monitor) {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        connectDragPreview: connect.dragPreview(),\r\n        isDragging: monitor.isDragging()\r\n    }\r\n}\r\n\r\nclass TokenBoxItem extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { isDragging, connectDragSource} = this.props;\r\n\r\n        let classNameModifier = '';\r\n\r\n        if (isDragging) {\r\n            classNameModifier = ' token-box-token-dragging';\r\n        } \r\n\r\n        return connectDragSource(\r\n            <div className={'token-box-token'+classNameModifier}><Item token={this.props.token} ></Item></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DragSource('token', itemSource, collect)(TokenBoxItem);","import Big from 'big.js';\r\nimport GetTokenPrice from './GetTokenPrice';\r\nimport { DictionarrySymbol } from './SupportedTokens';\r\nimport TokenFromWei from './TokenFromWei';\r\nimport store from '../redux/store';\r\nimport { updateEstimateBet } from '../redux/actions';\r\n\r\nconst EstimateBetValue = (tokensToBet, prices, dispatch = true) => {\r\n    const symbols = tokensToBet.map((curr) => {\r\n        return DictionarrySymbol.get(curr.token);\r\n    })   \r\n\r\n    const values = symbols.map((curr) => {\r\n        return prices.data[curr].USD;\r\n    });\r\n\r\n    let sum = values.reduce((sum, curr, index) => {\r\n        console.log(`${Big(TokenFromWei(tokensToBet[index]))} * ${curr} = ${Big(TokenFromWei(tokensToBet[index])).mul(curr)}`);\r\n        return sum + parseFloat((Big(TokenFromWei(tokensToBet[index])).mul(curr).toFixed(2)));\r\n    }, 0)\r\n\r\n    if (sum === '00.00') sum = '0'\r\n\r\n    if (dispatch) store.dispatch(updateEstimateBet(sum));\r\n\r\n    return sum;\r\n}\r\n\r\nexport default EstimateBetValue;","import { DictionarrySymbol, DictionarryDecimals } from './SupportedTokens';\r\nimport Optimize from './OptimizeTokenAmount';\r\nimport Big from 'big.js';\r\n\r\nconst getScientificNotation = (decimals) => {\r\n    const number = decimals - 1;\r\n\r\n    return `10e+${number}`\r\n}\r\n\r\nexport default (token, label = '', optimize = false) => {\r\n    switch (label) {\r\n        case '': {\r\n            if (optimize)\r\n            return `${Optimize(Big(token.amount).div(getScientificNotation(DictionarryDecimals.get(token.address))).toFixed())}`;\r\n            \r\n            return `${Big(token.amount).div(getScientificNotation(DictionarryDecimals.get(token.address))).toFixed()}`;\r\n        }\r\n\r\n        case 'symbol': {\r\n            if (optimize)\r\n            return `${Optimize(Big(token.amount).div(getScientificNotation(DictionarryDecimals.get(token.address))).toFixed())} ${DictionarrySymbol.get(token.address)}`;\r\n\r\n            return `${Big(token.amount).div(getScientificNotation(DictionarryDecimals.get(token.address))).toFixed()} ${DictionarrySymbol.get(token.address)}`;\r\n        }\r\n\r\n        case 'full': {\r\n            if (optimize)\r\n            return `${Optimize(Big(token.amount).div(getScientificNotation(DictionarryDecimals.get(token.address))).toFixed())} ${dictionarryFull.get(token.address)}`;\r\n\r\n            return `${Big(token.amount).div(getScientificNotation(DictionarryDecimals.get(token.address))).toFixed()} ${dictionarryFull.get(token.address)}`;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}","import React, { Component } from 'react';\r\nimport Layout from '../../components/Layout/Layout';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport { DragDropContext } from 'react-dnd';\r\nimport { connect } from 'react-redux';\r\nimport { Grid, Button, List, Label, Modal} from 'semantic-ui-react';\r\nimport BettingBox from '../../components/match/BettingBox';\r\nimport TokenBox from '../../components/match/TokenBox';\r\nimport { changeItemPosition, changeItemAmount, updatePrices, toggleModal } from '../../redux/actions';\r\nimport CryptoPrices from '../../helpers/CryptoPrices';\r\nimport store from '../../redux/store';\r\nimport Teams from '../../components/match/Teams';\r\nimport _ from 'lodash';\r\nimport ErrorModal from '../../components/ErrorModal';\r\n\r\nclass Match extends Component {\r\n\r\n    static async getInitialProps(props) {\r\n        const matchID = props.query.id;\r\n        \r\n        // This information will be pulled from database //\r\n        const teams = [{\r\n            name: 'Fnatic',\r\n            slug: 'fnatic',\r\n            imgUrl: `../../img/teams/fnatic.png`,\r\n            odds: 1.56\r\n        }, {\r\n            name: 'Gambit',\r\n            slug: 'gambit',\r\n            imgUrl: `../../img/teams/gambit.png`,\r\n            odds: 2.77\r\n        }];\r\n\r\n        return { teams };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const prices = await CryptoPrices();\r\n        store.dispatch(updatePrices(prices))\r\n    }\r\n\r\n    handleClick() {\r\n        const errorHead = \"You forgot to do the following\"\r\n        const errors = [];\r\n        if (!this.props.signedIn) errors.push('Please log in to place bets.');\r\n        if (this.props.tokens.toBet.length === 0) errors.push('Please place at least one token in order to place a bet.');\r\n        if (_.isEmpty(this.props.pickedTeam)) errors.push('Please pick a team.');\r\n        if (errors.length > 0) { store.dispatch(toggleModal(errorHead, errors)); console.log(this.props); return; }\r\n\r\n        //handle correct PLACE BET\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (                \r\n            <Grid relaxed>\r\n                <Grid.Column width={8}>\r\n                    <Teams teams={this.props.initial.teams} pickedTeam={this.props.pickedTeam} signedIn={this.props.signedIn} />\r\n                    LAST BETS:\r\n                </Grid.Column>\r\n                <Grid.Column width={8}>\r\n                    <h2>Place bet</h2>\r\n                    <BettingBox prices={this.props.prices} tokens={this.props.tokens.toBet} handleRange={this.props.handleRange} handleDelete={this.props.changePosition}/>\r\n                    <div className=\"bet-container\">\r\n                        <Button onClick={(event) => this.handleClick()} className=\"button-bet\" size=\"large\" color=\"black\" >\r\n                            Place bet\r\n                        </Button>\r\n                        <ErrorModal modal={this.props.errorModal} />\r\n                        <List relaxed floated=\"right\" className=\"info-bet\">\r\n                            {this.renderBetValue(this.props.betValue)}\r\n                            {this.renderEstimatedReward(this.props.betValue)}                 \r\n                        </List>\r\n                    </div>\r\n                        <h2>Balances</h2>\r\n                    <TokenBox signedIn={this.props.signedIn} tokens={this.props.tokens.wallet} handleDrop={this.props.changePosition}/>\r\n                </Grid.Column>                             \r\n            </Grid>                \r\n        );\r\n    }\r\n\r\n    renderBetValue(betValue) {\r\n        if (this.props.tokens.toBet.length > 0)\r\n        return <List.Item><Label className=\"orange-label\" horizontal>ESTIMATED BET VALUE</Label><strong>{` ${betValue}$`}</strong></List.Item>;\r\n\r\n        return '';\r\n    }\r\n\r\n    renderEstimatedReward(betValue) {\r\n        if (this.props.tokens.toBet.length > 0 && !(_.isEmpty(this.props.pickedTeam)) )\r\n        return <List.Item><Label className=\"orange-label\" horizontal>ESTIMATED RETURN</Label><strong>{` ${(parseFloat(betValue) * this.props.pickedTeam.odds).toFixed(2)}$`}</strong></List.Item>;\r\n\r\n        return '';\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changePosition: (token, pos) => {\r\n            dispatch(changeItemPosition(token, pos));\r\n        },\r\n\r\n        handleRange: (token) => {\r\n            dispatch(changeItemAmount(token))\r\n        }\r\n    }\r\n}\r\n  \r\n\r\nconst mapStateToProps = (state) => {\r\n        return {\r\n            tokens: state.tokens,\r\n            signedIn: state.signedIn,\r\n            betValue: state.betValue,\r\n            prices: state.prices,\r\n            pickedTeam: state.pickedTeam,\r\n            errorModal: state.errorModal\r\n        }\r\n    \r\n  }\r\n\r\nMatch = DragDropContext(HTML5Backend)(Match);\r\n\r\nexport default Layout(connect(mapStateToProps, mapDispatchToProps)(Match));","export function addItem(token) {\r\n    return {\r\n        type: 'ADD_ITEM',\r\n        token\r\n    }\r\n}\r\n\r\nexport function changeTokenPosition(token, pos) {\r\n    return {\r\n        type: 'CHANGE_POS',\r\n        token,\r\n        pos\r\n    }\r\n}\r\n\r\nexport function changeTokenAmount(token) {\r\n    return {\r\n        type: 'CHANGE_AMOUNT',\r\n        token\r\n    }\r\n}\r\n\r\nexport function updateEstimateBet(sum) {\r\n    return {\r\n        type: 'UPDATE_ESTIMATE_BET',\r\n        sum\r\n    }\r\n}\r\n\r\nexport function updatePrices(prices) {\r\n    return {\r\n        type: 'UPDATE_PRICES',\r\n        prices\r\n    }\r\n}\r\n\r\nexport function pickTeam(team) {\r\n    return {\r\n        type: 'PICK_TEAM',\r\n        team\r\n    }\r\n}\r\n\r\nexport function toggleModal(head = '', reasons = []) {\r\n    return {\r\n        type: 'TOGGLE_MODAL',\r\n        head: head,\r\n        reasons: reasons\r\n    }\r\n}\r\n","import _ from 'lodash';\r\nimport EstimateBetValue from '../helpers/EstimateBetValue';\r\n\r\nconst initialState = {tokens: {toBet: [], wallet: []}, account: '', signedIn: false, prices: {}, betValue: 0, pickedTeam: {}, errorModal: {isOpen: false, head: '', reasons: [] }};\r\n\r\nconst matchReducer = (state = initialState, action) => {\r\n    let newState = _.cloneDeep(state);\r\n\r\n    switch(action.type) {               \r\n        case 'ADD_ITEM': {\r\n            if(newState.items.wallet.some((curr) => curr.token == action.item.token)) return;\r\n            if(newState.items.toBet.some((curr) => curr.token == action.item.token)) return;\r\n           \r\n            newState.items.wallet.push(action.item);\r\n            \r\n            break;\r\n        }  \r\n\r\n        case 'CHANGE_POS': {          \r\n            if (action.item.position === 'token-box') {\r\n                action.item.position = action.pos;\r\n                newState.items.toBet.push(action.item);\r\n                newState.items.wallet = newState.items.wallet.filter((curr) => curr.token != action.item.token);\r\n            } else {\r\n                action.item.position = 'token-box';\r\n                action.item.amount = action.item.initialAmount;\r\n                newState.items.wallet.push(action.item);\r\n                newState.items.toBet = newState.items.toBet.filter((curr) => curr.token != action.item.token);           \r\n            }\r\n\r\n            newState.betValue = EstimateBetValue(newState.items.toBet, newState.prices, false);\r\n\r\n            break;\r\n        }\r\n\r\n        case 'LOG_OUT': {\r\n            newState = {...initialState};\r\n            newState.prices = state.prices;\r\n            console.log('Logged out! State is now: ', newState);\r\n            break;\r\n        }  \r\n\r\n        case 'LOG_IN': {\r\n            console.log('Loggin in...');\r\n            newState.account = action.account;\r\n            newState.signedIn = true;\r\n            console.log('Logging in! State is now: ', newState);\r\n            break;\r\n        }\r\n\r\n        case 'UPDATE_PRICES': {\r\n            newState.prices = action.prices;\r\n            break;\r\n        }\r\n\r\n        case 'UPDATE_ESTIMATE_BET': {\r\n            newState.betValue = action.sum;\r\n            break;\r\n        }\r\n\r\n        case 'PICK_TEAM': {\r\n            newState.pickedTeam = action.team;\r\n            break;\r\n        }\r\n\r\n        case 'TOGGLE_MODAL': {\r\n            newState.errorModal.isOpen = !state.errorModal.isOpen;\r\n            newState.errorModal.head = action.head;\r\n            newState.errorModal.reasons = action.reasons;\r\n            break;\r\n        }\r\n\r\n    }\r\n    \r\n    return newState;\r\n}\r\n\r\nexport default matchReducer;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAIA;AACA;;;;;;;;;;;;AAEA;AACA;;AACA;AACA;;AADA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;;;;;;;AACA;AAAA;AAAA;;AACA;AACA;;;AAGA;AACA;;;;AADA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;AAAA;AAAA;;AACA;AACA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAIA;AAAA;AAKA;AAAA;AAKA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;A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","sourceRoot":""}