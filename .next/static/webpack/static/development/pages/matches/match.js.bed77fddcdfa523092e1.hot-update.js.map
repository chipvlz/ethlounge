{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.bed77fddcdfa523092e1.hot-update.js","sources":["webpack:///./pages/matches/match.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport Layout from \"../../components/Layout/Layout\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\nimport { DragDropContext } from \"react-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { Grid, Button, List, Label, Modal } from \"semantic-ui-react\";\r\nimport BettingBox from \"../../components/match/BettingBox\";\r\nimport TokenBox from \"../../components/match/TokenBox\";\r\nimport {\r\n  updatePrices,\r\n  toggleErrorModal,\r\n  toggleModal\r\n} from \"../../redux/actions\";\r\nimport CryptoPrices from \"../../helpers/CryptoPrices\";\r\nimport store from \"../../redux/store\";\r\nimport Teams from \"../../components/match/Teams\";\r\nimport _ from \"lodash\";\r\nimport ErrorModal from \"../../components/ErrorModal\";\r\nimport ConfirmBetModal from \"../../components/match/ConfirmBetModal\";\r\n\r\nclass Match extends Component {\r\n  static async getInitialProps(props) {\r\n    const matchID = props.query.id;\r\n\r\n    // This information will be pulled from database //\r\n    const teams = [\r\n      {\r\n        name: \"Fnatic\",\r\n        slug: \"fnatic\",\r\n        imgUrl: `../../img/teams/fnatic.png`,\r\n        odds: 1.56\r\n      },\r\n      {\r\n        name: \"Gambit\",\r\n        slug: \"gambit\",\r\n        imgUrl: `../../img/teams/gambit.png`,\r\n        odds: 2.77\r\n      }\r\n    ];\r\n\r\n    const gameInfo = { matchID, teams };\r\n\r\n    return { gameInfo };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const prices = await CryptoPrices();\r\n    store.dispatch(updatePrices(prices));\r\n  }\r\n\r\n  handleClick(event, tokensToBet) {\r\n    event.preventDefault();\r\n    const errorHead = \"You forgot to do the following\";\r\n    const errors = [];\r\n    if (!this.props.signedIn) errors.push(\"Please log in to place bets.\");\r\n    if (tokensToBet.length === 0)\r\n      errors.push(\"Please place at least one token in order to place a bet.\");\r\n    if (_.isEmpty(this.props.pickedTeam)) errors.push(\"Please pick a team.\");\r\n    if (errors.length > 0) {\r\n      store.dispatch(toggleErrorModal(errorHead, errors));\r\n      return;\r\n    }\r\n\r\n    store.dispatch(toggleModal(\"confirmBetModal\"));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid relaxed>\r\n        <ErrorModal modal={this.props.errorModal} />\r\n        <ConfirmBetModal\r\n          open={this.props.confirmBetModal.isOpen}\r\n          tokensToBet={this.props.tokens.toBet}\r\n          pickedTeam={this.props.pickedTeam}\r\n          account={this.props.account}\r\n          matchID={this.props.initial.gameInfo.matchID}\r\n        />\r\n\r\n        <Grid.Column width={8}>\r\n          <Teams\r\n            teams={this.props.initial.gameInfo.teams}\r\n            pickedTeam={this.props.pickedTeam}\r\n            signedIn={this.props.signedIn}\r\n          />\r\n          LAST BETS:\r\n        </Grid.Column>\r\n        <Grid.Column width={8}>\r\n          <h2>Place bet</h2>\r\n          <BettingBox\r\n            prices={this.props.prices}\r\n            tokens={this.props.tokens.toBet}\r\n          />\r\n          <div className=\"bet-container\">\r\n            <Button\r\n              onClick={event =>\r\n                this.handleClick(event, this.props.tokens.toBet)\r\n              }\r\n              className=\"button-bet\"\r\n              size=\"large\"\r\n              color=\"black\">\r\n              Place bet\r\n            </Button>\r\n            <List relaxed floated=\"right\" className=\"info-bet\">\r\n              {this.renderBetValue(this.props.betValue)}\r\n              {this.renderEstimatedReward(this.props.betValue)}\r\n            </List>\r\n          </div>\r\n          <h2>Balances</h2>\r\n          <TokenBox\r\n            signedIn={this.props.signedIn}\r\n            tokens={this.props.tokens.wallet}\r\n          />\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  renderBetValue(betValue) {\r\n    if (this.props.tokens.toBet.length > 0)\r\n      return (\r\n        <List.Item>\r\n          <Label className=\"orange-label\" horizontal>\r\n            ESTIMATED BET VALUE\r\n          </Label>\r\n          <strong>{` ${betValue}$`}</strong>\r\n        </List.Item>\r\n      );\r\n\r\n    return \"\";\r\n  }\r\n\r\n  renderEstimatedReward(betValue) {\r\n    if (this.props.tokens.toBet.length > 0 && !_.isEmpty(this.props.pickedTeam))\r\n      return (\r\n        <List.Item>\r\n          <Label className=\"orange-label\" horizontal>\r\n            ESTIMATED RETURN\r\n          </Label>\r\n          <strong>{` ${(\r\n            parseFloat(betValue) * this.props.pickedTeam.odds\r\n          ).toFixed(2)}$`}</strong>\r\n        </List.Item>\r\n      );\r\n\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tokens: state.tokens,\r\n    signedIn: state.signedIn,\r\n    betValue: state.betValue,\r\n    prices: state.prices,\r\n    pickedTeam: state.pickedTeam,\r\n    errorModal: state.errorModal,\r\n    confirmBetModal: state.confirmBetModal,\r\n    account: state.account\r\n  };\r\n};\r\n\r\nMatch = DragDropContext(HTML5Backend)(Match);\r\n\r\nexport default Layout(connect(mapStateToProps)(Match));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAAA;AAOA;AACA;AAFA;AAOA;;;AAEA;AACA;AAGA;AAAA;AAAA;AAOA;AACA;;;AAEA;AACA;AAGA;AAAA;AAAA;AASA;AACA;;;;;;AA5HA;;;;;;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAvBA;AACA;AA+HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}