{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.cf3b42807bfc3fa12391.hot-update.js","sources":["webpack:///./pages/matches/match.js"],"sourcesContent":["import _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Grid, Label, List, Icon } from 'semantic-ui-react';\r\n\r\nimport Layout from '../../components/Layout/Layout';\r\nimport BettingBox from '../../components/match/BettingBox';\r\nimport ConfirmBetModal from '../../components/match/ConfirmBetModal';\r\nimport ErrorModal from '../../components/match/ErrorModal';\r\nimport Teams from '../../components/match/Teams';\r\nimport BalanceBox from '../../components/match/BalanceBox';\r\nimport {\r\n  toggleErrorModal,\r\n  toggleModal,\r\n  updatePrices,\r\n  addTokens\r\n} from '../../redux/match/actions';\r\nimport store from '../../redux/store';\r\nimport CryptoPrices from '../../utils/CryptoPrices';\r\nimport '../../static/css/match.css';\r\nimport CookieCall from '../../utils/CookieCall';\r\nimport ServerSideRedirect from '../../utils/SeverSideRedirect';\r\nimport MatchDetails from '../../components/match/MatchDetails';\r\n\r\nclass Token {\r\n  constructor(id, symbol, amount, position = '', displayName, decimals) {\r\n    this.id = id;\r\n    this.symbol = symbol;\r\n    this.amount = amount;\r\n    this.initialAmount = amount;\r\n    this.position = position;\r\n    this.displayName = displayName;\r\n    this.decimals = decimals;\r\n  }\r\n}\r\n\r\nclass Match extends Component {\r\n  static async getInitialProps(props) {\r\n    const { req, res } = props;\r\n    const matchID = props.query.id;\r\n\r\n    const api_response = await CookieCall(req, `/api/match_info?id=${matchID}`);\r\n\r\n    const data = api_response.data;\r\n\r\n    const errorURL = '/404';\r\n\r\n    if (!data) {\r\n      ServerSideRedirect(res, errorURL);\r\n    }\r\n\r\n    const matchInfo = { ...data };\r\n\r\n    return { matchInfo };\r\n  }\r\n\r\n  async componentWillMount() {\r\n    console.log(this.props.initial.matchInfo);\r\n    const { tokens } = this.props.initial.matchInfo;\r\n\r\n    const prices = await CryptoPrices(tokens);\r\n    store.dispatch(updatePrices(prices));\r\n    this.addTokens(\r\n      this.props.user.balances,\r\n      this.props.initial.matchInfo.tokens\r\n    );\r\n  }\r\n\r\n  async addTokens(userBalances, supportedTokens) {\r\n    if (userBalances) {\r\n      const tokens = [];\r\n\r\n      console.log(userBalances, supportedTokens);\r\n\r\n      userBalances.forEach(token => {\r\n        const { balance, id } = token;\r\n        const { displayName, decimals, symbol } = _.find(supportedTokens, {\r\n          _id: id\r\n        });\r\n\r\n        tokens.push(\r\n          new Token(id, symbol, balance, 'balance-box', displayName, decimals)\r\n        );\r\n      });\r\n\r\n      store.dispatch(addTokens(tokens));\r\n    }\r\n  }\r\n\r\n  handleClick(event, tokensToBet) {\r\n    event.preventDefault();\r\n    const errorHead = 'You forgot to do the following';\r\n    const errors = [];\r\n    if (!this.props.user) errors.push('Please log in to place bets.');\r\n    if (tokensToBet.length === 0)\r\n      errors.push('Please place at least one token in order to place a bet.');\r\n    if (_.isEmpty(this.props.pickedTeam)) errors.push('Please pick a team.');\r\n    if (errors.length > 0) {\r\n      store.dispatch(toggleErrorModal(errorHead, errors));\r\n      return;\r\n    }\r\n\r\n    store.dispatch(toggleModal('confirmBetModal'));\r\n  }\r\n\r\n  render() {\r\n    console.log(teams);\r\n    const { match, teams, league, bet } = this.props.initial.matchInfo;\r\n    const {\r\n      user,\r\n      pickedTeam,\r\n      prices,\r\n      tokens,\r\n      betValue,\r\n      confirmBetModal\r\n    } = this.props;\r\n\r\n    return (\r\n      <Grid relaxed>\r\n        <ErrorModal modal={this.props.errorModal} />\r\n        <ConfirmBetModal\r\n          open={confirmBetModal.isOpen}\r\n          tokensToBet={tokens.toBet}\r\n          pickedTeam={pickedTeam}\r\n          user={user}\r\n          match={match}\r\n          teams={teams}\r\n        />\r\n\r\n        <Grid.Column width={8}>\r\n          <Teams\r\n            teams={teams}\r\n            user={user}\r\n            match={match}\r\n            pickedTeam={pickedTeam}\r\n          />\r\n          <MatchDetails match={match} league={league} />\r\n        </Grid.Column>\r\n        <Grid.Column width={8}>\r\n          <h2>Place bet</h2>\r\n          <BettingBox prices={prices} tokens={tokens.toBet} />\r\n          <div className=\"bet-container\">\r\n            <Button\r\n              icon\r\n              onClick={event => this.handleClick(event, tokens.toBet)}\r\n              className=\"button-bet\"\r\n              size=\"large\"\r\n              color=\"black\">\r\n              Bet\r\n              <Icon style={{ marginLeft: '1em !important' }} name=\"check\" />\r\n            </Button>\r\n            <List relaxed floated=\"right\" className=\"info-bet\">\r\n              {this.renderBetValue(betValue)}\r\n              {this.renderEstimatedReward(betValue)}\r\n            </List>\r\n          </div>\r\n          <h2>Balances</h2>\r\n          <BalanceBox user={user} tokens={tokens.wallet} />\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  renderBetValue(betValue) {\r\n    if (this.props.tokens.toBet.length > 0)\r\n      return (\r\n        <List.Item>\r\n          <Label className=\"orange-label-light\" horizontal>\r\n            ESTIMATED BET VALUE\r\n          </Label>\r\n          <span className=\"font-dark\">\r\n            <strong>{` ${betValue}$`}</strong>\r\n          </span>\r\n        </List.Item>\r\n      );\r\n\r\n    return '';\r\n  }\r\n\r\n  renderEstimatedReward(betValue) {\r\n    if (\r\n      this.props.tokens.toBet.length > 0 &&\r\n      !_.isEmpty(this.props.pickedTeam)\r\n    ) {\r\n      const { match } = this.props.initial.matchInfo;\r\n      const { pickedTeam } = this.props;\r\n\r\n      return (\r\n        <List.Item>\r\n          <Label className=\"orange-label-light\" horizontal>\r\n            ESTIMATED RETURN\r\n          </Label>\r\n          <span className=\"font-dark\">\r\n            <strong>{` ${(parseFloat(betValue) * pickedTeam.odds).toFixed(\r\n              2\r\n            )}$`}</strong>\r\n          </span>\r\n        </List.Item>\r\n      );\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tokens: state.match.tokens,\r\n    betValue: state.match.betValue,\r\n    prices: state.match.prices,\r\n    pickedTeam: state.match.pickedTeam,\r\n    errorModal: state.match.errorModal,\r\n    confirmBetModal: state.match.confirmBetModal,\r\n    user: state.login.user\r\n  };\r\n};\r\n\r\nexport default Layout(connect(mapStateToProps)(Match));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;;AAEA;AACA;;AADA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAKA;;;;;;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AADA;AAGA;AADA;AAFA;AAAA;AAAA;AACA;AAKA;AAGA;AAEA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAIA;;;AAEA;AACA;AAGA;AAAA;AAAA;AAGA;AAAA;AAMA;AACA;;;AAEA;AACA;AAGA;AAAA;AAIA;AAEA;AAAA;AAAA;AAGA;AAAA;AAOA;AACA;AACA;AACA;;;;;;AArKA;;;;;;AACA;AACA;;AAEA;AACA;;AADA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAlBA;AACA;AAwKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}