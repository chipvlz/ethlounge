{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.af09d727dc9a1745aa25.hot-update.js","sources":["webpack:///./components/match/ConfirmBetModal.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Header,\r\n  Icon,\r\n  Image,\r\n  List,\r\n  Modal\r\n} from 'semantic-ui-react';\r\n\r\nimport { toggleModal } from '../../redux/match/actions';\r\nimport store from '../../redux/store';\r\nimport { Router } from '../../next-routes';\r\nimport TokenFromWei from '../../utils/TokenFromWei';\r\nimport { backend } from '../../config/config';\r\nimport PlaceBet from '../../utils/api/PlaceBet';\r\nimport Sleep from '../../utils/Sleep';\r\n\r\nclass ConfirmBetModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleConfirm = this.handleConfirm.bind(this);\r\n    this.closeFinalModal = this.closeFinalModal.bind(this);\r\n    this.state = {\r\n      isConfirmButtonLoading: false,\r\n      confirmButtonIcon: false,\r\n      confirmButtonText: 'Confirm and place bet',\r\n      confirmButtonClassName: 'orange-button-dark',\r\n      isBackButtonDisabled: false\r\n    };\r\n  }\r\n\r\n  closeFinalModal() {\r\n    this.setState({\r\n      isFinalModalErrorOpen: false,\r\n      isFinalModalSuccessOpen: false\r\n    });\r\n    store.dispatch(toggleModal('confirmBetModal'));\r\n  }\r\n\r\n  async handleConfirm(match, pickedTeam, tokensToBet, user) {\r\n    this.setState({\r\n      isConfirmButtonLoading: true,\r\n      isBackButtonDisabled: true\r\n    });\r\n\r\n    const tokensBet = tokensToBet.map(token => {\r\n      return { id: token.id, amount: token.balance };\r\n    });\r\n\r\n    const api_response = await PlaceBet({\r\n      matchID: match._id,\r\n      teamID: pickedTeam.id,\r\n      betMakerID: user._id,\r\n      tokensBet\r\n    });\r\n\r\n    const { data } = api_response;\r\n\r\n    if (data.bet) {\r\n      this.setState({\r\n        isConfirmButtonLoading: false,\r\n        isBackButtonDisabled: false,\r\n        confirmButtonIcon: 'chevron down',\r\n        confirmButtonText: 'Bet placed successfuly'\r\n      });\r\n\r\n      await Sleep(500);\r\n\r\n      Router.push(`/matches/${match._id}`);\r\n    } else {\r\n      this.setState({\r\n        isConfirmButtonLoading: false,\r\n        isBackButtonDisabled: false,\r\n        confirmButtonIcon: 'exclamation',\r\n        confirmButtonText: 'Placing bet failed',\r\n        confirmButtonClassName: 'error-button'\r\n      });\r\n    }\r\n  }\r\n\r\n  renderTeamLogos(match, pickedTeam) {\r\n    const notPickedTeam =\r\n      pickedTeam.id === match.teams[0].id ? match.teams[1] : match.teams[0];\r\n\r\n    return (\r\n      <div className=\"confirm-bet-modal-img-div\">\r\n        <div className=\"confirm-bet-modal-img-divider\" />\r\n        <Image\r\n          className=\"confirm-bet-modal-img confirm-bet-modal-img-picked\"\r\n          src={`${backend}/img/${pickedTeam.logo}`}\r\n        />\r\n\r\n        <Image\r\n          className=\"confirm-bet-modal-img confirm-bet-modal-img-notpicked\"\r\n          src={`${backend}/img/${notPickedTeam.logo}`}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let { open, tokensToBet, pickedTeam, user, match } = this.props;\r\n\r\n    const tokenList = tokensToBet.map(curr => {\r\n      return (\r\n        <List.Item as=\"p\" key={curr.symbol}>\r\n          <Icon name=\"right triangle\" />\r\n          {`${TokenFromWei(curr)} ${curr.symbol}`}\r\n        </List.Item>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Modal size=\"tiny\" open={open}>\r\n        <Modal.Header className=\"modal-header\">\r\n          <Icon style={{ marginRight: '1em' }} name=\"check\" />\r\n          You are about to place a bet\r\n        </Modal.Header>\r\n        <Modal.Content>\r\n          <Modal.Description>\r\n            <Grid>\r\n              <Grid.Column width={10}>\r\n                <Header>Your bet: </Header>\r\n                <List className=\"confirm-bet-modal-ul font-dark-orange\" as=\"ul\">\r\n                  {tokenList}\r\n                </List>\r\n                <Header>\r\n                  Picked Team:\r\n                  <span className=\"font-dark-orange\">\r\n                    {' ' + pickedTeam.displayName}\r\n                  </span>\r\n                </Header>\r\n                <span className=\"odds-message\">\r\n                  <Icon name=\"info circle\" />\r\n                  Odds are now {pickedTeam.odds} but keep in mind they can\r\n                  change prior to the game start based on future bets.\r\n                </span>\r\n              </Grid.Column>\r\n              <Grid.Column width={6}>\r\n                {this.renderTeamLogos(match, pickedTeam)}\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Modal.Description>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button\r\n            disabled={this.state.isBackButtonDisabled}\r\n            className=\"dark-button\"\r\n            onClick={e => store.dispatch(toggleModal('confirmBetModal'))}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n            loading={this.state.isConfirmButtonLoading}\r\n            disabled={this.state.isConfirmButtonDisabled}\r\n            icon={this.state.confirmButtonIcon}\r\n            className={this.state.confirmButtonClassName}\r\n            content={this.state.confirmButtonText}\r\n            onClick={e =>\r\n              this.handleConfirm(match, pickedTeam, tokensToBet, user)\r\n            }\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ConfirmBetModal;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAJA;AAWA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;;;;AAEA;;;;;;AACA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;;AADA;AAOA;AACA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;;AAOA;AACA;;AACA;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;;;;;;;;;;;;;;;AASA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAAA;AAAA;AAKA;AAAA;AAIA;AAAA;AACA;AAAA;AAKA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAaA;;;;AAnJA;AACA;AAqJA;;;;A","sourceRoot":""}