{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.13a40a04ae143b03698e.hot-update.js","sources":["webpack:///./pages/matches/match.js","webpack:///./redux/match/actions.js","webpack:///./redux/match/matchReducer.js"],"sourcesContent":["import _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { DragDropContext } from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Grid, Label, List, Modal } from 'semantic-ui-react';\r\n\r\nimport Layout from '../../components/Layout/Layout';\r\nimport BettingBox from '../../components/match/BettingBox';\r\nimport ConfirmBetModal from '../../components/match/ConfirmBetModal';\r\nimport ErrorModal from '../../components/match/ErrorModal';\r\nimport Teams from '../../components/match/Teams';\r\nimport TokenBox from '../../components/match/TokenBox';\r\nimport {\r\n  toggleErrorModal,\r\n  toggleModal,\r\n  updatePrices,\r\n  addTokens\r\n} from '../../redux/match/actions';\r\nimport store from '../../redux/store';\r\nimport CryptoPrices from '../../utils/CryptoPrices';\r\nimport '../../static/css/match.css';\r\nimport EthLounge from '../../ethereum/EthLounge';\r\n\r\nclass Match extends Component {\r\n  static async getInitialProps(props) {\r\n    const matchID = props.query.id;\r\n\r\n    // This information will be pulled from database //\r\n    const teams = [\r\n      {\r\n        name: 'Fnatic',\r\n        slug: 'fnatic',\r\n        imgUrl: `../../img/teams/fnatic.png`,\r\n        odds: 1.56\r\n      },\r\n      {\r\n        name: 'Gambit',\r\n        slug: 'gambit',\r\n        imgUrl: `../../img/teams/gambit.png`,\r\n        odds: 2.77\r\n      }\r\n    ];\r\n\r\n    const gameInfo = { matchID, teams };\r\n\r\n    return { gameInfo };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const prices = await CryptoPrices();\r\n    store.dispatch(updatePrices(prices));\r\n  }\r\n\r\n  handleClick(event, tokensToBet) {\r\n    event.preventDefault();\r\n    const errorHead = 'You forgot to do the following';\r\n    const errors = [];\r\n    if (!this.props.signedIn) errors.push('Please log in to place bets.');\r\n    if (tokensToBet.length === 0)\r\n      errors.push('Please place at least one token in order to place a bet.');\r\n    if (_.isEmpty(this.props.pickedTeam)) errors.push('Please pick a team.');\r\n    if (errors.length > 0) {\r\n      store.dispatch(toggleErrorModal(errorHead, errors));\r\n      return;\r\n    }\r\n\r\n    store.dispatch(toggleModal('confirmBetModal'));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid relaxed>\r\n        <ErrorModal modal={this.props.errorModal} />\r\n        <ConfirmBetModal\r\n          open={this.props.confirmBetModal.isOpen}\r\n          tokensToBet={this.props.tokens.toBet}\r\n          pickedTeam={this.props.pickedTeam}\r\n          account={this.props.account}\r\n          matchID={this.props.initial.gameInfo.matchID}\r\n        />\r\n\r\n        <Grid.Column width={8}>\r\n          <Teams\r\n            teams={this.props.initial.gameInfo.teams}\r\n            pickedTeam={this.props.pickedTeam}\r\n            signedIn={this.props.signedIn}\r\n          />\r\n          LAST BETS:\r\n        </Grid.Column>\r\n        <Grid.Column width={8}>\r\n          <h2>Place bet</h2>\r\n          <BettingBox\r\n            prices={this.props.prices}\r\n            tokens={this.props.tokens.toBet}\r\n          />\r\n          <div className=\"bet-container\">\r\n            <Button\r\n              onClick={event =>\r\n                this.handleClick(event, this.props.tokens.toBet)\r\n              }\r\n              className=\"button-bet\"\r\n              size=\"large\"\r\n              color=\"black\">\r\n              Place bet\r\n            </Button>\r\n            <List relaxed floated=\"right\" className=\"info-bet\">\r\n              {this.renderBetValue(this.props.betValue)}\r\n              {this.renderEstimatedReward(this.props.betValue)}\r\n            </List>\r\n          </div>\r\n          <h2>Balances</h2>\r\n          <TokenBox\r\n            signedIn={this.props.signedIn}\r\n            tokens={this.props.tokens.wallet}\r\n          />\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  renderBetValue(betValue) {\r\n    if (this.props.tokens.toBet.length > 0)\r\n      return (\r\n        <List.Item>\r\n          <Label className=\"orange-label\" horizontal>\r\n            ESTIMATED BET VALUE\r\n          </Label>\r\n          <strong>{` ${betValue}$`}</strong>\r\n        </List.Item>\r\n      );\r\n\r\n    return '';\r\n  }\r\n\r\n  renderEstimatedReward(betValue) {\r\n    if (this.props.tokens.toBet.length > 0 && !_.isEmpty(this.props.pickedTeam))\r\n      return (\r\n        <List.Item>\r\n          <Label className=\"orange-label\" horizontal>\r\n            ESTIMATED RETURN\r\n          </Label>\r\n          <strong>{` ${(\r\n            parseFloat(betValue) * this.props.pickedTeam.odds\r\n          ).toFixed(2)}$`}</strong>\r\n        </List.Item>\r\n      );\r\n\r\n    return '';\r\n  }\r\n}\r\n\r\nconst getTokens = async signedIn => {\r\n  if (signedIn) {\r\n    const result = await EthLounge.methods\r\n      .getBalances()\r\n      .call({ from: account });\r\n    const tokenAddresses = result[0];\r\n    const tokenAmounts = result[1];\r\n    const tokens = [];\r\n\r\n    for (let i = 0; i < tokenAmounts.length; i++) {\r\n      if (tokenAmounts[i] !== '0') {\r\n        const newToken = new Token(\r\n          tokenAddresses[i],\r\n          tokenAmounts[i],\r\n          'balance-box'\r\n        );\r\n\r\n        tokens.push(newToken);\r\n      }\r\n    }\r\n    store.dispatch(addTokens(tokens));\r\n  }\r\n};\r\n\r\nstore.subscribe(() => {\r\n  if (store.getState().lastAction.type === 'LOG_IN') {\r\n    console.log('LOG_IN');\r\n    getTokens();\r\n  }\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tokens: state.match.tokens,\r\n    signedIn: state.login.signedIn,\r\n    betValue: state.match.betValue,\r\n    prices: state.match.prices,\r\n    pickedTeam: state.match.pickedTeam,\r\n    errorModal: state.match.errorModal,\r\n    confirmBetModal: state.match.confirmBetModal,\r\n    account: state.login.account\r\n  };\r\n};\r\n\r\nMatch = DragDropContext(HTML5Backend)(Match);\r\n\r\nexport default Layout(connect(mapStateToProps)(Match));\r\n","export function addTokens(tokens) {\r\n  return {\r\n    type: 'ADD_TOKENS',\r\n    token\r\n  };\r\n}\r\n\r\nexport function changeTokenPosition(token, pos) {\r\n  return {\r\n    type: 'CHANGE_POS',\r\n    token,\r\n    pos\r\n  };\r\n}\r\n\r\nexport function changeTokenAmount(token) {\r\n  return {\r\n    type: 'CHANGE_AMOUNT',\r\n    token\r\n  };\r\n}\r\n\r\nexport function updateEstimateBet(sum) {\r\n  return {\r\n    type: 'UPDATE_ESTIMATE_BET',\r\n    sum\r\n  };\r\n}\r\n\r\nexport function updatePrices(prices) {\r\n  return {\r\n    type: 'UPDATE_PRICES',\r\n    prices\r\n  };\r\n}\r\n\r\nexport function pickTeam(team) {\r\n  return {\r\n    type: 'PICK_TEAM',\r\n    team\r\n  };\r\n}\r\n\r\nexport function toggleErrorModal(head = '', reasons = []) {\r\n  return {\r\n    type: 'TOGGLE_ERROR_MODAL',\r\n    head: head,\r\n    reasons: reasons\r\n  };\r\n}\r\n\r\nexport function toggleModal(property) {\r\n  return {\r\n    type: 'TOGGLE_MODAL',\r\n    property\r\n  };\r\n}\r\n","import _ from 'lodash';\r\nimport EstimateBetValue from '../../utils/EstimateBetValue';\r\n\r\nconst initialState = {\r\n  tokens: { toBet: [], wallet: [] },\r\n  prices: {},\r\n  betValue: 0,\r\n  pickedTeam: {},\r\n  errorModal: { isOpen: false, head: '', reasons: [] },\r\n  confirmBetModal: { isOpen: false }\r\n};\r\n\r\nconst matchReducer = (state = initialState, action) => {\r\n  let newState = _.cloneDeep(state);\r\n\r\n  switch (action.type) {\r\n    case 'ADD_TOKENS': {\r\n      // if (\r\n      //   newState.tokens.wallet.some(\r\n      //     curr => curr.address == action.token.address\r\n      //   )\r\n      // )\r\n      //   return;\r\n      // if (\r\n      //   newState.tokens.toBet.some(curr => curr.address == action.token.address)\r\n      // )\r\n      //   return;\r\n\r\n      newState.tokens.wallet = action.tokens;\r\n\r\n      break;\r\n    }\r\n\r\n    case 'CHANGE_POS': {\r\n      console.log(action.token, state);\r\n      if (action.token.position === 'balance-box') {\r\n        action.token.position = action.pos;\r\n        newState.tokens.toBet.push(action.token);\r\n        newState.tokens.wallet = newState.tokens.wallet.filter(\r\n          curr => curr.address != action.token.address\r\n        );\r\n      } else {\r\n        action.token.position = 'balance-box';\r\n        action.token.amount = action.token.initialAmount;\r\n        newState.tokens.wallet.push(action.token);\r\n        newState.tokens.toBet = newState.tokens.toBet.filter(\r\n          curr => curr.address != action.token.address\r\n        );\r\n      }\r\n\r\n      newState.betValue = EstimateBetValue(\r\n        newState.tokens.toBet,\r\n        newState.prices,\r\n        false\r\n      );\r\n\r\n      break;\r\n    }\r\n\r\n    case 'UPDATE_PRICES': {\r\n      newState.prices = action.prices;\r\n      break;\r\n    }\r\n\r\n    case 'UPDATE_ESTIMATE_BET': {\r\n      newState.betValue = action.sum;\r\n      break;\r\n    }\r\n\r\n    case 'PICK_TEAM': {\r\n      newState.pickedTeam = action.team;\r\n      break;\r\n    }\r\n\r\n    case 'TOGGLE_MODAL': {\r\n      newState[action.property].isOpen = !newState[action.property].isOpen;\r\n      break;\r\n    }\r\n\r\n    case 'TOGGLE_ERROR_MODAL': {\r\n      newState.errorModal.isOpen = !state.errorModal.isOpen;\r\n      newState.errorModal.head = action.head;\r\n      newState.errorModal.reasons = action.reasons;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\nexport default matchReducer;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAAA;AAOA;AACA;AAFA;AAOA;;;AAEA;AACA;AAGA;AAAA;AAAA;AAOA;AACA;;;AAEA;AACA;AAGA;AAAA;AAAA;AASA;AACA;;;;;;AA5HA;;;;;;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAvBA;AACA;AA+HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AACA;AALA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AACA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AArEA;AACA;AAuEA;AACA;AACA;AACA;;;;A","sourceRoot":""}