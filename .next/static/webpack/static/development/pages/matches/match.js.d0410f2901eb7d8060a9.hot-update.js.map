{"version":3,"file":"static/webpack/static\\development\\pages\\matches\\match.js.d0410f2901eb7d8060a9.hot-update.js","sources":["webpack:///./components/Layout/Menu.js","webpack:///./pages/matches/match.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Button,\r\n  Menu,\r\n  Image,\r\n  Icon,\r\n  Grid,\r\n  Modal,\r\n  Header\r\n} from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport web3 from '../../ethereum/web3';\r\nimport Blockies from 'react-blockies';\r\nimport EthLounge from '../../ethereum/EthLounge';\r\nimport store from '../../redux/store';\r\nimport { Sleep } from '../../utils/Sleep';\r\nimport ShortEthAddress from '../../utils/ShortEthAddress';\r\n\r\nclass MenuExampleSizeLarge extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n    this.state = {\r\n      loading: false,\r\n      account: '',\r\n      signedIn: false,\r\n      popupOpen: false,\r\n      readyToGenerateRightMenu: false\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // Restore session from local storage\r\n    const account = window.localStorage.getItem('eth-account', account);\r\n    const openSessionAccounts = await web3.eth.getAccounts();\r\n\r\n    if (account && openSessionAccounts.length > 0) {\r\n      store.dispatch({ type: 'LOG_IN', account: account });\r\n      this.setState({ signedIn: true, account: account });\r\n    } else store.dispatch({ type: 'LOG_OUT' });\r\n\r\n    this.setState({ readyToGenerateRightMenu: true });\r\n  }\r\n\r\n  generateRightMenu(signedIn, readyToGenerateRightMenu) {\r\n    if (readyToGenerateRightMenu) {\r\n      if (signedIn) {\r\n        const ethAddressShort = ShortEthAddress(this.state.account);\r\n\r\n        const ethAddressStyle = { color: 'white' };\r\n\r\n        return (\r\n          <Grid>\r\n            <Grid.Row verticalAlign=\"middle\">\r\n              <Grid.Column width={4}>\r\n                <div className=\"user-avatar\">\r\n                  <Blockies seed={this.state.account} scale={6} size={18} />\r\n                </div>\r\n              </Grid.Column>\r\n              <Grid.Column width={1} />\r\n              <Grid.Column width={10} className=\"user-column-right\">\r\n                <div className=\"user-column-right-address\">\r\n                  <a\r\n                    style={ethAddressStyle}\r\n                    href={`https://etherscan.io/address/${this.state.account}`}\r\n                    target=\"_blank\">\r\n                    {ethAddressShort}\r\n                  </a>\r\n                </div>\r\n                <Button\r\n                  onClick={e => this.handleLogout(e)}\r\n                  loading={this.state.loading}\r\n                  size=\"mini\"\r\n                  color=\"black\"\r\n                  icon\r\n                  labelPosition=\"right\"\r\n                  className=\"user-column-right-signout-button\">\r\n                  Log out\r\n                  <Icon name=\"power off\" />\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        );\r\n      }\r\n      return (\r\n        <Button\r\n          loading={this.state.loading}\r\n          onClick={e => this.handleLogin(e)}\r\n          color=\"black\">\r\n          Sign in\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return <Button loading={true} className=\"dark-orange-bg\" />;\r\n  }\r\n\r\n  async handleLogin(e) {\r\n    this.setState({ loading: true });\r\n    await Sleep(300);\r\n\r\n    let account;\r\n\r\n    [account] = await web3.eth.getAccounts();\r\n\r\n    if (typeof account !== 'undefined') {\r\n      this.setState({ account: account });\r\n      this.setState({ signedIn: true });\r\n      store.dispatch({ type: 'LOG_IN', account: account });\r\n      window.localStorage.setItem('eth-account', account);\r\n    } else {\r\n      this.setState({ popupOpen: true });\r\n    }\r\n\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  async handleLogout(e) {\r\n    this.setState({ loading: true });\r\n    await Sleep(600);\r\n    this.setState({ signedIn: false });\r\n    store.dispatch({ type: 'LOG_OUT' });\r\n    this.setState({ loading: false });\r\n    window.localStorage.removeItem('eth-account');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Menu inverted size=\"large\" className=\"menu\">\r\n        <Menu.Item>\r\n          <Image src=\"/static/img/logo.png\" />\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Icon name=\"chess knight\" />\r\n          My Bets\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <Icon name=\"angle double down\" />\r\n          Deposit\r\n        </Menu.Item>\r\n\r\n        <Menu.Item>\r\n          <Icon name=\"angle double up\" />\r\n          Withdraw\r\n        </Menu.Item>\r\n\r\n        <Menu.Item>\r\n          <Icon name=\"question circle outline\" />\r\n          FAQ\r\n        </Menu.Item>\r\n        <Menu.Item position=\"right\">\r\n          {this.generateRightMenu(\r\n            this.state.signedIn,\r\n            this.state.readyToGenerateRightMenu\r\n          )}\r\n        </Menu.Item>\r\n\r\n        <Modal open={this.state.popupOpen} size=\"small\">\r\n          <Modal.Header>You need Metamask to sign in</Modal.Header>\r\n          <Modal.Content image>\r\n            <Image wrapped size=\"medium\" src=\"/static/img/metamask.png\" />\r\n            <Modal.Description>\r\n              <Header>What is Metamask?</Header>\r\n              <p>\r\n                MetaMask is an extension for accessing Ethereum Dapps. You can\r\n                download it{' '}\r\n                <a href=\"https://metamask.io/\" target=\"_blank\">\r\n                  here\r\n                </a>\r\n                .\r\n              </p>{' '}\r\n              <Header>But I have Metamask...</Header>\r\n              <p>\r\n                If you have Metamask installed, please make sure to unlock your\r\n                account.\r\n              </p>\r\n            </Modal.Description>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button\r\n              className=\"dark-orange-bg font-white\"\r\n              onClick={e => {\r\n                this.setState({ popupOpen: false });\r\n              }}>\r\n              Close\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuExampleSizeLarge;\r\n","import _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { DragDropContext } from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Grid, Label, List, Modal } from 'semantic-ui-react';\r\n\r\nimport Layout from '../../components/Layout/Layout';\r\nimport BettingBox from '../../components/match/BettingBox';\r\nimport ConfirmBetModal from '../../components/match/ConfirmBetModal';\r\nimport ErrorModal from '../../components/match/ErrorModal';\r\nimport Teams from '../../components/match/Teams';\r\nimport TokenBox from '../../components/match/TokenBox';\r\nimport {\r\n  toggleErrorModal,\r\n  toggleModal,\r\n  updatePrices,\r\n  addTokens\r\n} from '../../redux/match/actions';\r\nimport store from '../../redux/store';\r\nimport CryptoPrices from '../../utils/CryptoPrices';\r\nimport '../../static/css/match.css';\r\nimport EthLounge from '../../ethereum/EthLounge';\r\n\r\nclass Token {\r\n  constructor(address, amount, position) {\r\n    this.address = address;\r\n    this.amount = amount;\r\n    this.initialAmount = amount;\r\n    this.position = position;\r\n  }\r\n}\r\n\r\nclass Match extends Component {\r\n  static async getInitialProps(props) {\r\n    const matchID = props.query.id;\r\n\r\n    // This information will be pulled from database //\r\n    const teams = [\r\n      {\r\n        name: 'Fnatic',\r\n        slug: 'fnatic',\r\n        imgUrl: `../../img/teams/fnatic.png`,\r\n        odds: 1.56\r\n      },\r\n      {\r\n        name: 'Gambit',\r\n        slug: 'gambit',\r\n        imgUrl: `../../img/teams/gambit.png`,\r\n        odds: 2.77\r\n      }\r\n    ];\r\n\r\n    const gameInfo = { matchID, teams };\r\n\r\n    return { gameInfo };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const prices = await CryptoPrices();\r\n    store.dispatch(updatePrices(prices));\r\n  }\r\n\r\n  handleClick(event, tokensToBet) {\r\n    event.preventDefault();\r\n    const errorHead = 'You forgot to do the following';\r\n    const errors = [];\r\n    if (!this.props.signedIn) errors.push('Please log in to place bets.');\r\n    if (tokensToBet.length === 0)\r\n      errors.push('Please place at least one token in order to place a bet.');\r\n    if (_.isEmpty(this.props.pickedTeam)) errors.push('Please pick a team.');\r\n    if (errors.length > 0) {\r\n      store.dispatch(toggleErrorModal(errorHead, errors));\r\n      return;\r\n    }\r\n\r\n    store.dispatch(toggleModal('confirmBetModal'));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid relaxed>\r\n        <ErrorModal modal={this.props.errorModal} />\r\n        <ConfirmBetModal\r\n          open={this.props.confirmBetModal.isOpen}\r\n          tokensToBet={this.props.tokens.toBet}\r\n          pickedTeam={this.props.pickedTeam}\r\n          account={this.props.account}\r\n          matchID={this.props.initial.gameInfo.matchID}\r\n        />\r\n\r\n        <Grid.Column width={8}>\r\n          <Teams\r\n            teams={this.props.initial.gameInfo.teams}\r\n            pickedTeam={this.props.pickedTeam}\r\n            signedIn={this.props.signedIn}\r\n          />\r\n          LAST BETS:\r\n        </Grid.Column>\r\n        <Grid.Column width={8}>\r\n          <h2>Place bet</h2>\r\n          <BettingBox\r\n            prices={this.props.prices}\r\n            tokens={this.props.tokens.toBet}\r\n          />\r\n          <div className=\"bet-container\">\r\n            <Button\r\n              onClick={event =>\r\n                this.handleClick(event, this.props.tokens.toBet)\r\n              }\r\n              className=\"button-bet\"\r\n              size=\"large\"\r\n              color=\"black\">\r\n              Place bet\r\n            </Button>\r\n            <List relaxed floated=\"right\" className=\"info-bet\">\r\n              {this.renderBetValue(this.props.betValue)}\r\n              {this.renderEstimatedReward(this.props.betValue)}\r\n            </List>\r\n          </div>\r\n          <h2>Balances</h2>\r\n          <TokenBox\r\n            signedIn={this.props.signedIn}\r\n            tokens={this.props.tokens.wallet}\r\n          />\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  renderBetValue(betValue) {\r\n    if (this.props.tokens.toBet.length > 0)\r\n      return (\r\n        <List.Item>\r\n          <Label className=\"orange-label\" horizontal>\r\n            ESTIMATED BET VALUE\r\n          </Label>\r\n          <strong>{` ${betValue}$`}</strong>\r\n        </List.Item>\r\n      );\r\n\r\n    return '';\r\n  }\r\n\r\n  renderEstimatedReward(betValue) {\r\n    if (this.props.tokens.toBet.length > 0 && !_.isEmpty(this.props.pickedTeam))\r\n      return (\r\n        <List.Item>\r\n          <Label className=\"orange-label\" horizontal>\r\n            ESTIMATED RETURN\r\n          </Label>\r\n          <strong>{` ${(\r\n            parseFloat(betValue) * this.props.pickedTeam.odds\r\n          ).toFixed(2)}$`}</strong>\r\n        </List.Item>\r\n      );\r\n\r\n    return '';\r\n  }\r\n}\r\n\r\nconst getTokens = async account => {\r\n  const result = await EthLounge.methods.getBalances().call({ from: account });\r\n  const tokenAddresses = result[0];\r\n  const tokenAmounts = result[1];\r\n  const tokens = [];\r\n\r\n  for (let i = 0; i < tokenAmounts.length; i++) {\r\n    if (tokenAmounts[i] !== '0') {\r\n      const newToken = new Token(\r\n        tokenAddresses[i],\r\n        tokenAmounts[i],\r\n        'balance-box'\r\n      );\r\n\r\n      tokens.push(newToken);\r\n    }\r\n  }\r\n  store.dispatch(addTokens(tokens));\r\n};\r\n\r\nstore.subscribe(() => {\r\n  if (store.getState().lastAction.type === 'LOG_IN') {\r\n    console.log('LOG_IN');\r\n    getTokens(store.getState().login.account);\r\n  }\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tokens: state.match.tokens,\r\n    signedIn: state.login.signedIn,\r\n    betValue: state.match.betValue,\r\n    prices: state.match.prices,\r\n    pickedTeam: state.match.pickedTeam,\r\n    errorModal: state.match.errorModal,\r\n    confirmBetModal: state.match.confirmBetModal,\r\n    account: state.login.account\r\n  };\r\n};\r\n\r\nMatch = DragDropContext(HTML5Backend)(Match);\r\n\r\nexport default Layout(connect(mapStateToProps)(Match));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AAUA;AACA;;;;;;;;;;;;AAEA;AACA;;AACA;AACA;;AADA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAMA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;;;;;;;AACA;AAAA;AAAA;;AACA;AACA;;;AAGA;AACA;;;;AADA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;AAAA;AAAA;;AACA;AACA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAIA;AAAA;AAKA;AAAA;AAKA;AAAA;AAGA;AAAA;AAOA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAcA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAWA;;;;AA7KA;AACA;AA+KA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAAA;AAOA;AACA;AAFA;AAOA;;;AAEA;AACA;AAGA;AAAA;AAAA;AAOA;AACA;;;AAEA;AACA;AAGA;AAAA;AAAA;AASA;AACA;;;;;;AA5HA;;;;;;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAvBA;AACA;AA+HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}