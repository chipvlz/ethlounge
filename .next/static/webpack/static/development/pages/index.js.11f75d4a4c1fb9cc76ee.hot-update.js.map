{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.11f75d4a4c1fb9cc76ee.hot-update.js","sources":["webpack:///./components/Layout/Menu.js"],"sourcesContent":["import React, { Component } from 'react';\nimport {\n  Button,\n  Menu,\n  Image,\n  Icon,\n  Modal,\n  Message,\n  Form\n} from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport store from '../../redux/store';\nimport axios from 'axios';\nimport MenuUser from './MenuUser';\n\nclass TopMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSignUp = this.handleSignUp.bind(this);\n    this.state = {\n      username: '',\n      password: '',\n      password_2: '',\n      signUpErrors: [],\n      signUpOpen: false,\n      signInOpen: false\n    };\n  }\n\n  renderRightMenu(user) {\n    switch (user) {\n      case false: {\n        return (\n          <div className=\"auth-buttons\">\n            <Button\n              onClick={e => this.setState({ signInOpen: true })}\n              color=\"black\">\n              Sign in\n            </Button>\n            <span className=\"or\">or</span>\n            <Button\n              onClick={e => this.setState({ signUpOpen: true })}\n              color=\"black\"\n              className=\"margin-right-1em\">\n              Sign up\n            </Button>\n          </div>\n        );\n      }\n\n      case null: {\n        return '';\n      }\n\n      default: {\n        return <MenuUser user={user} />;\n      }\n    }\n  }\n\n  async handleSignUp() {\n    // Client side check\n    const { username, password, password_2 } = this.state;\n    const signUpErrors = [];\n\n    if (username.length < 5) {\n      signUpErrors.push('Username should be at least 4 characters long.');\n    } else if (username.length > 20) {\n      signUpErrors.push('Username should be maximum 20 characters long.');\n    }\n\n    if (password.length >= 8) {\n      if (password !== password_2) {\n        signUpErrors.push('Passwords do not seem to match.');\n      }\n    } else {\n      signUpErrors.push('Password should contain at least 8 characters.');\n    }\n\n    if (signUpErrors.length > 0) {\n      this.setState({ signUpErrors });\n      return;\n    }\n\n    const response = await axios({\n      method: 'post',\n      url: '/register',\n      data: { username, password },\n      config: { headers: { 'Content-Type': 'multipart/form-data' } }\n    });\n\n    if (response.data.success) {\n      // const data = new FormData();\n      // data.append('username', username);\n      // data.append('password', password);\n      // const response = await axios({\n      //   method: 'post',\n      //   url: '/login',\n      //   data: data,\n      //   config: { headers: { 'Content-Type': 'multipart/form-data' } }\n      // });\n    } else {\n      this.setState({\n        signUpErrors: [\n          'This username already exist. Try to pick something else.'\n        ]\n      });\n    }\n  }\n\n  isButtonDisabled(text) {\n    const ok = text.every(curr => curr.length > 0);\n\n    return !ok;\n  }\n\n  render() {\n    return (\n      <Menu inverted size=\"large\" className=\"top-menu\" icon=\"labeled\">\n        <Menu.Item className=\"item-logo\">\n          <Image className=\"logo\" src=\"/static/img/logo/logo.png\" />\n        </Menu.Item>\n        <Menu.Item>\n          <Icon name=\"chess knight\" />\n          My Bets\n        </Menu.Item>\n        <Menu.Item>\n          <Icon name=\"angle double down\" />\n          Deposit\n        </Menu.Item>\n\n        <Menu.Item>\n          <Icon name=\"angle double up\" />\n          Withdraw\n        </Menu.Item>\n\n        <Menu.Item>\n          <Icon name=\"question circle outline\" />\n          FAQ\n        </Menu.Item>\n        <Menu.Item position=\"right\" className=\"menu-right-item\">\n          {this.renderRightMenu(this.props.user)}\n        </Menu.Item>\n\n        <Modal open={this.state.signUpOpen} size=\"small\">\n          <Modal.Header className=\"modal-header\">\n            Sign up as a new user\n          </Modal.Header>\n          <Modal.Content>\n            <Form>\n              <Form.Field>\n                <label>Username</label>\n                <input\n                  onChange={e => this.setState({ username: e.target.value })}\n                  value={this.state.username}\n                />\n              </Form.Field>\n\n              <Form.Field>\n                <label>Password</label>\n                <input\n                  type=\"password\"\n                  onChange={e => this.setState({ password: e.target.value })}\n                  value={this.state.password}\n                />\n              </Form.Field>\n\n              <Form.Field>\n                <label>Repeat password</label>\n                <input\n                  type=\"password\"\n                  onChange={e => this.setState({ password_2: e.target.value })}\n                  value={this.state.password_2}\n                />\n              </Form.Field>\n            </Form>\n            {this.renderSingUpErrors(this.state.signUpErrors)}\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              className=\"dark-button\"\n              onClick={e => {\n                this.setState({\n                  signUpOpen: false,\n                  username: '',\n                  password: '',\n                  password_2: ''\n                });\n              }}>\n              Back\n            </Button>\n\n            <Button\n              className=\"orange-button-dark\"\n              onClick={e => this.handleSignUp()}\n              disabled={this.isButtonDisabled([\n                this.state.username,\n                this.state.password,\n                this.state.password_2\n              ])}>\n              Sign Up\n            </Button>\n          </Modal.Actions>\n        </Modal>\n\n        <Modal open={this.state.signInOpen} size=\"small\">\n          <Modal.Header className=\"modal-header\">Sign in</Modal.Header>\n          <Modal.Content>\n            <Form id=\"login_form\" action=\"/login\" method=\"post\">\n              <Form.Field>\n                <label>Username</label>\n                <input\n                  name=\"username\"\n                  onChange={e => this.setState({ username: e.target.value })}\n                  value={this.state.username}\n                />\n              </Form.Field>\n\n              <Form.Field>\n                <label>Password</label>\n                <input\n                  name=\"password\"\n                  type=\"password\"\n                  onChange={e => this.setState({ password: e.target.value })}\n                  value={this.state.password}\n                />\n              </Form.Field>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button\n              className=\"dark-button\"\n              onClick={e => {\n                this.setState({\n                  signInOpen: false,\n                  username: '',\n                  password: ''\n                });\n              }}>\n              Back\n            </Button>\n\n            <Button\n              type=\"submit\"\n              form=\"login_form\"\n              className=\"orange-button-dark\"\n              disabled={this.isButtonDisabled([\n                this.state.username,\n                this.state.password\n              ])}>\n              Sign In\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </Menu>\n    );\n  }\n\n  renderSingUpErrors(errors) {\n    if (errors[0]) {\n      return (\n        <Message\n          error\n          header=\"There were some errors in your sign up form.\"\n          list={errors}\n        />\n      );\n    }\n    return '';\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.login.user\n  };\n};\n\nexport default connect(mapStateToProps)(TopMenu);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAWA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AA1BA;AA4BA;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AAAA;;;;;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;;AADA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAKA;AACA;;;;;;;;;;;;;;;AAEA;AACA;AAAA;AAAA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAIA;AAAA;AAKA;AAAA;AAKA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AATA;AAcA;AACA;AAAA;AAAA;AACA;AAHA;AAaA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AARA;AAaA;AACA;AACA;AACA;AAJA;AAcA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;;;;AA9PA;AACA;AAgQA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;A","sourceRoot":""}